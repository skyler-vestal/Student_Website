[{"id":0,"href":"/~ves314/docs/","title":"Example Site","section":"Introduction","content":"Introduction\r#\r\rFerre hinnitibus erat accipitrem dixi Troiae tollens\r#\r\rLorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\n Pedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret  Est simul fameque tauri qua ad\r#\r\rLocum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol\r#\r\rNec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue,\rviralItunesBalancing, bankruptcy_file_pptp)) {\rfile += ip_cybercrime_suffix;\r}\rif (runtimeSmartRom == netMarketingWord) {\rvirusBalancingWin *= scriptPromptBespoke + raster(post_drive,\rwindowsSli);\rcd = address_hertz_trojan;\rsoap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui);\r} else {\rmegabyte.api = modem_flowchart - web + syntaxHalftoneAddress;\r}\rif (3 \u0026lt; mebibyteNetworkAnimated) {\rpharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle(\rdvrSyntax, cdma);\radf_sla *= hoverCropDrive;\rtemplateNtfs = -1 - vertical;\r} else {\rexpressionCompressionVariable.bootMulti = white_eup_javascript(\rtable_suffix);\rguidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1,\rmanagementRosetta(webcamActivex), 740874);\r}\rvar virusTweetSsl = nullGigo;\r Trepident sitimque\r#\r\rSentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":1,"href":"/~ves314/docs/ta/cs303e/exercises/ch1/","title":"Chapter 1","section":"Exercises","content":"Chapter 1 Exercise Solutions\r#\r\rDownload Solutions\nEmbdedded solutions:\n# Exercises for Chapter 1 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) # 1.2 print(\u0026#34;Welcome to Python\u0026#34;) print(\u0026#34;Welcome to Python\u0026#34;) print(\u0026#34;Welcome to Python\u0026#34;) print(\u0026#34;Welcome to Python\u0026#34;) print(\u0026#34;Welcome to Python\u0026#34;) # 1.4 print(\u0026#34;a a^2 a^3\u0026#34;) print(\u0026#34;1 1 1\u0026#34;) print(\u0026#34;2 4 8\u0026#34;) print(\u0026#34;3 9 27\u0026#34;) print(\u0026#34;4 16 64\u0026#34;) # 1.7 print(4 * (1 - (1 / 3) + (1 / 5) - (1 / 7) + (1 / 9) - (1 / 11))) print(4 * (1 - (1 / 3) + (1 / 5) - (1 / 7) + (1 / 9) - (1 / 11) + (1 / 13) - (1 / 15))) # 1.8 print(\u0026#34;Area: \u0026#34;) print(5.5 * 5.5 * 3.14) print(\u0026#34;Perimeter: \u0026#34;) print(2 * 5.5 * 3.14) # 1.11 # Don\u0026#39;t think the textbook has covered multi-line statements yet ... # using one regardless print(\u0026#34;Population year 1:\u0026#34;) print(312032486 + (1 * 365 * 24 * 60 * 60 // 7) + (1 * 365 * 24 * 60 * 60 // 45) - (1 * 365 * 24 * 60 * 60 // 13)) print(\u0026#34;Population year 2:\u0026#34;) print(312032486 + (2 * 365 * 24 * 60 * 60 // 7) + (2 * 365 * 24 * 60 * 60 // 45) - (2 * 365 * 24 * 60 * 60 // 13)) print(\u0026#34;Population year 3:\u0026#34;) print(312032486 + (3 * 365 * 24 * 60 * 60 // 7) + (3 * 365 * 24 * 60 * 60 // 45) - (3 * 365 * 24 * 60 * 60 // 13)) print(\u0026#34;Population year 4:\u0026#34;) print(312032486 + (4 * 365 * 24 * 60 * 60 // 7) + (4 * 365 * 24 * 60 * 60 // 45) - (4 * 365 * 24 * 60 * 60 // 13)) print(\u0026#34;Population year 5:\u0026#34;) print(312032486 + (5 * 365 * 24 * 60 * 60 // 7) + (5 * 365 * 24 * 60 * 60 // 45) - (5 * 365 * 24 * 60 * 60 // 13)) "},{"id":2,"href":"/~ves314/docs/ta/cs314/","title":"CS 314","section":"TA Classes","content":"CS 314 - Data Structures\r#\r\rHey y\u0026rsquo;all!\nThis page is updated for the Fall 2020 session of CS 314.\nIf you have any questions about anything (this class, CS, hobbies, etc.) you can reach me with whatever mode of communication works best for you here.\nMy main responsibilities for this class include holding discussion and grading assignments for 50895, and answering questions on Piazza and during help hours.\nI\u0026rsquo;m very happy to be here! I love TAing, computer science, and the GDC. We can chat about whatever you want if you\u0026rsquo;re ever bored =)\nI also use =) too much on Piazza if you haven\u0026rsquo;t figured that out already.\n"},{"id":3,"href":"/~ves314/docs/ta/cs314/explanations/","title":"Explanations","section":"CS 314","content":"Supplemental Explanations for CS 314\r#\r\rThis directory covers topics that may require some additional explanations. This can be either due to hard examples, or just because a topic may need another listen to for the topic to make sense. If you have any specific requests for supplemental explanations, feel free to contact me here!\n"},{"id":4,"href":"/~ves314/docs/ta/cs303e/review/midterm/","title":"Midterm","section":"Exam Reviews","content":"Midterm Review\r#\r\rMC/Short Answer Section\r#\r\rNoah\u0026rsquo;s Multiple Choice\r#\r\rNoah (fellow TA) has made a lot of great multiple choice questions that he\u0026rsquo;s decided to share with me. Big üëè for him.\nAssume libraries have been imported correctly for the following questions.\n What is output by the following code?  x = int(52.2) y = math.floor(999.9) print(x, y) A. 52 1000\rB. 52 999\rC. 52.0 999.0\rD. 52.0 1000.0\rWhat is output by the following code?  t = math.floor(-909.1) a = int(-49.1) print(t, a) A. -908 -49\rB. -909 -50\rC. -910 -50\rD. -908 -50\rE. -909 -49\rF. -910 -49\rWhat is output by the following code?  y = math.floor(-3.99 - .01) j = math.floor(5.99 + .1) print(y, j) A. -3 5\rB. -4 5\rC. -3 6\rD. RUNTIME ERROR\rE. -4 6\rWhat is output by the following code?  m = int(52.9 + .1) print(m) A. 53.0\rB. 52\rC. RUNTIME ERROR\rD. 52.0\rE. 53\rWhat is output by the following code?  p = 10 // 3 q = 3 // 10 print(p, q) A. 3.0 3.0\rB. 3 3\rC. 3.0 0.0\rD. 3 0\rWhat is output by the following code?  y = 4 / 2 a = 2 % 6 print(y, a) A. 2.0 2.0\rB. 2 2\rC. 2 0\rD. 2.0 0.0\rE. 2.0 2\rWhat is output by the following code?  f = 9 % -4 g = -7 % 13 print(f, g) A. -3 -6\rB. -1 -7\rC. -3 6\rD. 1 -7\rWhat is output by the following code?  x = 2 y = x - 2 x *= 2 y += -1 print(x, y) A. 0, 1\rB. 4 1\rC. 0 -1\rD. 4 -1\rWhat is output by the following code?  x = eval(\u0026#39;4\u0026#39;) y = int(\u0026#39;-23\u0026#39;) print(y, x) A. 4 23\rB. -23 4\rC. 23 -4\rD. SYNTAX ERROR\rE. RUNTIME ERROR\rWhat is output by the following code?  x = eval(\u0026#39;9 + 1\u0026#39;) print(x) A. 9 + 1\rB. SYNTAX ERROR\rC. RUNTIME ERROR\rD. 10\rE. 10.0\rWhat is output by the following code?  t = int(\u0026#39;1 - 1\u0026#39;) print(t) A. SYNTAX ERROR\rB. 1 - 1\rC. RUNTIME ERROR\rD. 0\rE. 0.0\rWhat is output by the following code?  k = eval(\u0026#39;99.0 + 1\u0026#39;) print(k) A. RUNTIME ERROR\rB. 100.0\rC. SYNTAX ERROR\rD. 100\rWhat is output by the following code?  x = 2 y = 4 z = 9 if x \u0026lt;= 2 and y \u0026gt; 4: print(\u0026#39;case1\u0026#39;) elif z \u0026lt; 9 or x \u0026gt;= 2: print(\u0026#39;case2\u0026#39;) else: print(\u0026#39;case3\u0026#39;) A. case2\rB. case3\rC. case1\rWhat is output by the following code?  count = 0 x = \u0026#39;A\u0026#39; y = \u0026#39;B\u0026#39; if x == \u0026#39;X\u0026#39; or y == x: count += 1 elif count \u0026lt; 50 and y == \u0026#39;B\u0026#39;: count += 5 else: count *= 3 count *= 2 print(count) A. 8\rB. 2\rC. 10\rD. 5\rE. 1\rWhat is output by the following code?  import random num = random.randint(0,1) if num == 0: print(num) elif num == 1: print(num - 1) else: print(50) A. 1\rB. 0\rC. Impossible to Determine\rD. 50\rWhat is output by the following code?  x = 1 y = \u0026#39;1\u0026#39; a = x == y and x \u0026gt; 0 b = y != \u0026#39;1\u0026#39; or x % 5 \u0026gt;= 1 print(a, b) A. True True\rB. False True\rC. True False\rD. False False\rWhat is output by the following code?  count = 0 for i in range(0, 10): count *= 2 print(count) A. 1024\rB. 2\rC. 0\rD. 20\rWhat is output by the following code?  loop_control = 1 count = 0 while loop_control \u0026lt; 10: loop_control *= 2 count += 1 print(count) A. 6\rB. 4\rC. 3\rD. 10\rE. 5\rWhat is output by the following code?  what_am_i = 0 for i in range(50): what_am_i = i print(what_am_i) A. RUNTIME ERROR\rB. 50\rC. 49\rD. 1\rWhat is output by the following code?  loop_control = -2 while loop_control \u0026lt; 50: loop_control += 1 print(loop_control) A. 51\rB. 48\rC. 50\rD. 49\rWhat is output by the following code?  count = 0 for i in range(3, 15, 3): count += 1 print(count) A. 3\rB. INFINITE LOOP\rC. 5\rD. 4\rWhat is output by the following code?  loop_control = -10 while loop_control \u0026lt;= 0: loop_control *= 2 print(loop_control) A. INFINITE LOOP\rB. 1\rC. 20\rD. 0\rWhat is output by the following code?  count = 0 for i in range(10, 0, -1): count += 1 print(count) A. 0\rB. INFINITE LOOP\rC. 10\rD. 11\rE. 9\rWhat is output by the following code?  def a(x): x = b(x) return x + 2 def b(y): return y * 2 what_am_i = a(5) print(what_am_i) A. 7\rB. 9\rC. 10\rD. 12\rWhat is output by the following code?  def a(x, y): x = 3 y = 3 return x * y def b(z, t): z += 2 t = a(z, t) return z * t what_am_i = b(0, 0) print(what_am_i) A. 18\rB. 0\rC. 9\rD. 27\rWhat is output by the following code?  def a(x, y): return x + y def b(z, t): z = 0 t = 1 return a(z, t) z = 50 t = 0 print(b(z, t), z, t) A. 1 0 1\rB. 50 0 1\rC. 50 50 0\rD. 1 50 0\rCS 312 Fall \u0026lsquo;19\r#\r\rThe following is Mike\u0026rsquo;s CS 312 Exam 1 from Fall 2019 and 2018. You can find the original page here. I\u0026rsquo;ve translated a few questions from Java to Python\n What is output by the following code when it is run?  x1 = 10 y1 = 2 + x1 // 3 x1 += 2 y1 -= 1 y1 = 3 + y1 print(x1, y1) What is output by the following code when it is run?  a2 = 2.0 b2 = 3.0 c2 = 2.0 b2 *= c2 * (a2 + b2) print(b2, c2) How many asterisks does the following code print out?  for i in range(5): print(\u0026#34;***\u0026#34;) for j in range(3): print(\u0026#34;*\u0026#34;) print(\u0026#34;***\u0026#34;) for j in range(1, 6): print(\u0026#34;*\u0026#34;) How many asterisks does the following code print out?  for i in range(1, 11, 2): for j in range(i): print(\u0026#34;*\u0026#34;) How many asteriks does the following code print out?  def a(): for i in range(1, 9): print(\u0026#34;*\u0026#34;) def b(): for i in range(3): print(\u0026#34;*\u0026#34;) a() print(\u0026#34;*\u0026#34;) def c(): a() b() for i in range(1, 4): a() b() a() b() c() What is output by the following code when it is run?  def f(x6, y6): y6 -= 3 x6 *= 2 print(x6, y6) x6 = -5 y6 = 5 f(x6, y6) f(y6, x6) print(x6, y6) What is output by the following code when it is run?  x5 = 2 y5 = 30 while y5 \u0026gt;= 4: x5 *= 2 y5 = y5 / 2 print(x5, y5) What is output by the following code when it is run?  import math a3 = -2.75 b3 = 3.751 c3 = -5.0 print(math.ceil(a3), math.floor(b3), math.ceil(c3)) CS 312 Fall \u0026lsquo;18\r#\r\r What is output by the following code when it is run?  x1 = 3 y1 = x1 * 3 a1 = x1 // 2 + y1 // 2 x1 = x1 + 2 y1 -= 1 a1 = a1 / 2 print(x1, y1, a1) What is output by the following code when it is run?  x2 = 1 y2 = 10 y2 *= 1 + x2 * (y2 - 12) print(y2 - 10) What is output by the following code when it is run?  s3 = \u0026#34;x3\u0026#34; x3 = 4 a3 = 2.0 print(x3, 2, s3, a3, 1, sep=\u0026#34;\u0026#34;) How many asteriks does the following code print out?  print(\u0026#34;*\u0026#34;) for i in range(-1, 7): print(\u0026#34;*\u0026#34;) print(\u0026#34;*\u0026#34;) print(\u0026#34;*\u0026#34;) How many asteriks does the following code print out?  for i in range(1, 6): print(\u0026#34;**\u0026#34;) for j in range(1, 11): print(\u0026#34;**\u0026#34;) print(\u0026#34;***\u0026#34;) print(\u0026#34;*\u0026#34;) How many asteriks does the following code print out?  for i in range(0, 5): for j in range(1, i + 1): print(\u0026#34;*\u0026#34;) for j in range(0, 4): print(\u0026#34;*\u0026#34;) for k in range(0, 4): print(\u0026#34;*\u0026#34;) What is output by the following code when it is run?  x7 = 6 y7 = 3 z7 = y7 * 10 % (x7 - (y7 * 2)) print(z7) What is output by the following code when it is run?  def function8(x, y): x += 1 y -= 1 print(x + y) x8 = 8 y8 = -5 function8(y8, x8) function8(x8, x8) print(x8, y8) What is output by the following code when it is run?  def function9(x, y): x -= 1 y *= 2 return x + y x9 = 5 y9 = 10 x9 = function9(x9, y9) print(x9, y9) What is output by the following code when it is run?  def function10(x, y): x += 2 y -= 2 print(x * y) return x + y x = 2 y = 3 print(function10(x, y) + x * y + function10(y, y)) Written Section\r#\r\rOriginal Questions\r#\r\rLevel 1 Difficulty\r#\r\r3x3 Determinant\r#\r\rA determinant is a very useful calculation in linear algebra that can tell you how much an area or volume shrinks or grows when you squish and stretch out an area of space.   The video above is awesome if you want an intuitive feel for what this exactly means, and why the following calculations are the way they are. This video isn\u0026rsquo;t required to be watch to write the following function.\nConsider a \\( 2 \\times 2 \\) determinant calculation:\n\r\r\\[\r\\text{det}\r\\begin{bmatrix}\ra \u0026amp; b \\\\\rc \u0026amp; d\r\\end{bmatrix} = ad - bc\r\\]\r\rIn terms of Python, this can be implemented with the following function:\ndef det_2x2(a, b, c, d): return a * d - b * c In your case, use this function written above to make the process of calculating the determinannt of a \\(3 \\times 3\\) matrix easier:\n\r\\[\r\\text{det}\r\\begin{bmatrix}\ra \u0026amp; b \u0026amp; c \\\\\rd \u0026amp; e \u0026amp; f \\\\\rg \u0026amp; h \u0026amp; i\r\\end{bmatrix} = a \\cdot \\text{det}\\begin{bmatrix}\re \u0026amp; f \\\\\rh \u0026amp; i\r\\end{bmatrix} -\rb \\cdot \\text{det}\\begin{bmatrix}\rd \u0026amp; f \\\\\rg \u0026amp; i\r\\end{bmatrix} \u0026#43;\rc \\cdot \\text{det}\\begin{bmatrix}\rd \u0026amp; e \\\\\rg \u0026amp; h\r\\end{bmatrix}\r\\]\r\rImplement:\ndef det_3x3(a, b, c, d, e, f, g, h, i)\nusing def det_2x2(a, b, c, d) described above.\nThe function returns the determinant of the 3x3 matrix.\nLevel 2 Difficulty\r#\r\r1 Dimensional Random Walker\r#\r\rA 1D random walker is an agent that starts at the poisition 0 on a number line. Every turn, the agent has a 50% chance of moving left one unit to -1, and a 50% chance of moving right one unit to 1. As a result, the random walker will appear to dart back and fourth on the number line forever if you don\u0026rsquo;t give it any constraints. In this case, we want to run the random walker until our agent is \\( n \\) units away from its starting location\nImplement:\ndef random_walker_1d(n)\nwhere \\( n \\) represents the distance from the agent to its starting point. The simulation will stop once this distance is reached The function will return 2 parameters. The first represents the total moves required to reach this distance, and the second represents the average position of this random walker on its journey to this location.\nSamples:\nSeed = \u0026quot;Mike Scott\u0026quot;:\rrandom_walker_1d(10) = (64, -1.875)\rrandom_walker_1d(25) = (189, -9.645502645502646)\rrandom_walker_1d(50) = (1562, -22.51920614596671)\rrandom_walker_1d(100) = (2104, -35.163498098859314)\rrandom_walker_1d(300) = (21250, -169.24823529411765)\rrandom_walker_1d(500) = (82660, -272.5082748608759)\rrandom_walker_1d(1000) = (1989318, -233.90734362228665)\rrandom_walker_1d(5000) = (16308946, 284.5807719885761)\rLevel 3 Difficulty\r#\r\rCounting Part 1\r#\r\rCounting in probability and discrete math have a more complete meaning than the every day meaning. Essentially, counting is determining the total number of elements in a set. This really is what we do when we count normally, but this can be taken much further:\nIn mathematics, if you have \\(n\\) unique objects together, the amount of unique orderings is simply:\n\r\\[\r\\text{Unique Combinations} = n!\\\\\rn! = n \\cdot (n - 1) \\cdot (n - 2) \\cdot ... \\cdot 3 \\cdot 2 \\cdot 1\r\\]\r\rThis can be used to calculate the number of unique orderings of letters in a word. For example, according to this formula, cat should have 6 unique ordering of letters since there are 3 unique letters, so \\(n = 3\\):\n   # Word # Word     1 cat 3 tca   2 cta 4 tac   5 act 6 atc    However, consider the case with eel. If all three letters were unique there would be 6 unique combinations, but since there are two es, how many combinations can we really make?\n   # Word     1 eel   2 ele   3 lee    As it turns out, the more useful formula for unique combinations is as follows, where \\( a_k \\) is the # of occurences of the identical objects in the entire group. For example, in eel, \\( a_e = 2 \\):\n$$ \\text{Unique Combinations} = \\dfrac{n!}{a_1!a_2! \u0026hellip; a_k!} $$\nFor this problem, we\u0026rsquo;re going to calculate the unique combinations of lower-case words where there are 4 unique letters in the lower-case word. For example, dogs and mississippi both have 4 unique letters. Implement:\ndef count_unqiue_words(letter_1, letter_2, letter_3, letter_4)\nFor each parameter in the function, the parameter stores the number of occurences of that letter, so letter_1 for mississippi stores 1 for 1 occurence of m, whereas letter_2 stores 4 because of 4 is. The function returns the number of words from the letters given in the parameters.\nSamples:\ncats: count_unqiue_words(1, 1, 1, 1) = 24\rmississippi: count_unqiue_words(1, 4, 4, 2) = 34650\rHackerRank Questions\r#\r\rThe following are HackerRank programming questions to test your knowledge. To complete questions do the following:\n Register an account In the editor, change the language from Python 2 to Python 3:  Type your code within the if __name__ == '__main__': segment (you don\u0026rsquo;t have to know why this if statement is here) Write your code Hit \u0026ldquo;Run Code\u0026rdquo; to test if your solution solves the sample input. Hit \u0026ldquo;Submit Code\u0026rdquo; to test if your solution satisfies all test inputs.  On Target Problems:\n Printing/Concatenation Using Functions If-Else Loops Concatenaition/Loops Functions  Difficult (Above Exam) Problems:\n sWAP cASE  Hint: for let in s will make let store each character in the string while iterating    Solutions\r#\r\rMC/Short Answers\r#\r\rNoah\u0026rsquo;s MC\r#\r\r1. B\r2. F\r3. E\r4. E\r5. D\r6. E\r7. C\r8. D\r9. B\r10. D\r11. C\r12. B\r13. A\r14. C\r15. B\r16. B\r17. C\r18. B\r19. C\r20. C\r21. D\r22. A\r23. C\r24. D\r25. A\r26. D\rFall \u0026lsquo;19\r#\r\r1: 12 7\r2: 30.0 2.0\r3: 70\r4: 25\r5: 190\r6: -----\r-10 2\r10 -8\r-5 5\r-----\r7: 16 3.75\r8: -2 3 -5\rFall \u0026lsquo;18\r#\r\r1: 5 8 2.5\r2: -20\r3: 42x32.01\r4: 18\r5: 265\r6: 110\r7: Error (Technically DivisionError) using % by 0\r8: -----\r3\r16\r8 -5\r-----\r9: 24 10\r10: -----\r4\r5\r17 -----\rWritten Section\r#\r\rOriginal Questions\r#\r\r# Level 1 Difficulty def det_3x3(a, b, c, d, e, f, g, h, i): return a * det_2x2(e, f, h, i) - b * det_2x2(d, f, g, i) + c * det_2x2(d, e, g, h) def det_2x2(a, b, c, d): return a * d - b * c # Level 2 Difficulty from random import randint def random_walker_1d(n): moves = 0 x = 0 total = 0 while abs(x) \u0026lt; n: # Makes random numbers only -1 and 1. More straight forward code # to just use an if statement x += (randint(0, 1) * 2) - 1 moves += 1 total += x return moves, total/moves # Level 3 Difficulty def count_unqiue_words(letter_1, letter_2, letter_3, letter_4): total = letter_1 + letter_2 + letter_3 + letter_4 n = factorial(total) let_1_factor = factorial(letter_1) let_2_factor = factorial(letter_2) let_3_factor = factorial(letter_3) let_4_factor = factorial(letter_4) return n / (let_1_factor * let_2_factor * let_3_factor * let_4_factor) def factorial(n): num = 1 for i in range(2, n + 1): num *= i return num HackerRank\r#\r\r##### On Target: ##### # Printing/Concatenation def print_full_name(a, b): print(\u0026#34;Hello\u0026#34;, a, b + \u0026#34;! You just delved into python.\u0026#34;) # Using Functions a = eval(input()) b = eval(input()) m = eval(input()) print(pow(a, b)) print(pow(a, b, m)) # If-Else if __name__ == \u0026#39;__main__\u0026#39;: n = int(input().strip()) if n % 2 != 0: print(\u0026#34;Weird\u0026#34;) elif n \u0026gt;= 2 and n \u0026lt;= 5: print(\u0026#34;Not Weird\u0026#34;) elif n \u0026gt;= 6 and n \u0026lt;= 20: print(\u0026#34;Weird\u0026#34;) elif n \u0026gt;= 20: print(\u0026#34;Not Weird\u0026#34;) # Loops if __name__ == \u0026#39;__main__\u0026#39;: n = int(input()) for i in range(n): print(i ** 2) # Print Function if __name__ == \u0026#39;__main__\u0026#39;: n = int(input()) output = \u0026#34;\u0026#34; for i in range(1, n + 1): output += str(i) print(output) # Functions def is_leap(year): return (year % 4 == 0 and year % 100 != 0) or year % 400 == 0 ##### Difficult: ##### # sWAP cASE def swap_case(s): new_str = \u0026#34;\u0026#34; for let in s: let_id = ord(let) if (let_id \u0026gt;= 65 and let_id \u0026lt;= 90 or let_id \u0026gt;= 97 and let_id \u0026lt;= 122): multiple = -1 if let_id \u0026gt;= 97 else 1 new_str += chr(let_id + multiple * 32) else: new_str += let return new_str Colette made me put this:\n"},{"id":5,"href":"/~ves314/docs/ta/cs303e/syntax/","title":"Syntax","section":"CS 303E","content":"Python Syntax Review for CS 303E\r#\r\rVariables and Datatypes\r#\r\rTypes of Data\r#\r\r# Integer datatype: Stores whole numbers like -32, 0, 66, 2332312, ... int_var = -54 # Float datatype: Stores decimal numbers like 3.0, -2.3232, .00033, # 5.6e+15 float_var = -.04 # Boolean datatype: Stores the value true or false bool_var = True bool_var = False # String datatype: Stores any word str_var = \u0026#34;You can use double quotes\u0026#34; str_var = \u0026#39;or single quotes for strings\u0026#39; Modification\r#\r\r# These two are the same # This works for +, -, *, /, //, %, ** int_var = int_var + 5 int_var += 5 # Operators examples 10 / 3 # == 3.3333333333333335 10 // 3 # == 3 10 % 3 # == 1 10 ** 3 # == 1000 # Negative division -10 / 3 # == -3.3333333333333335 -10 // 3 # == -4 -10 % 3 # == 2 10 ** -3 # == .001 # Boolean negation not True # == False not False # == True # Concatenation \u0026#34;This is an example of \u0026#34; + \u0026#34;concatenation\u0026#34; str_var = \u0026#34;This is also an example of\u0026#34; str_var += \u0026#34; concatenation\u0026#34; Input / Output\r#\r\rConcatenation\r#\r\r# Output: Mike Scott teaches 1 class on MWTH print(\u0026#34;Mike Scott teaches 1 class on MWTH\u0026#34;) print(\u0026#34;Mike Scott teaches \u0026#34; + str(1) + \u0026#34; class on MWTH\u0026#34;) print(\u0026#34;Mike\u0026#34;, \u0026#34;Scott\u0026#34;, \u0026#34;teaches\u0026#34;, 1, \u0026#34;class\u0026#34;, \u0026#34;on\u0026#34;, \u0026#34;MWTH\u0026#34;) print(\u0026#34;Mike \u0026#34;, \u0026#34;Scott \u0026#34;, \u0026#34;teaches \u0026#34;, 1, \u0026#34; class \u0026#34;, \u0026#34;on \u0026#34;, \u0026#34;MWTH\u0026#34;, sep=\u0026#34;\u0026#34;) print(\u0026#34;Mike \u0026#34;, \u0026#34;Scott \u0026#34;, \u0026#34;teaches \u0026#34;, str(1) + \u0026#34; class \u0026#34;, \u0026#34;on \u0026#34;, \u0026#34;MWTH\u0026#34;, sep=\u0026#34;\u0026#34;) # Doesn\u0026#39;t work - Can\u0026#39;t concatenate non String datatypes print(\u0026#34;Mike Scott teaches \u0026#34; + 1 + \u0026#34; class on MWTH\u0026#34;) Multi-line Outputs\r#\r\r\u0026#39;\u0026#39;\u0026#39;Output: This is line 1 This is line 2 \u0026#39;\u0026#39;\u0026#39; print(\u0026#34;This is line 1\u0026#34;) print(\u0026#34;This is line 2\u0026#34;) # Output: This is one line. This is on the same line print(\u0026#34;This is one line. \u0026#34;, end=\u0026#34;\u0026#34;) print(\u0026#34;This is on the same line\u0026#34;) Multi-line Strings\r#\r\r# Best way print(\u0026#34;In case your string is \u0026#34; + \u0026#34;a bit too long\u0026#34;) # Works but looks bad print(\u0026#34;In case your string is \\ a bit too long\u0026#34;) print(\u0026#34;\u0026#34;\u0026#34;In case your string is a bit too long\u0026#34;\u0026#34;\u0026#34;) # Doesn\u0026#39;t work (too many spaces) print(\u0026#34;In case your string is \\ a bit too long\u0026#34;) print(\u0026#34;\u0026#34;\u0026#34;In case your string is a bit too long\u0026#34;\u0026#34;\u0026#34;) Escape Sequences\r#\r\r\u0026#39;\u0026#39;\u0026#39; Output: This is line 1 This is line 2 \u0026#39;\u0026#39;\u0026#39; print(\u0026#34;This is line 1\\nThis is line 2\u0026#34;) # Output: This is line 1 This is line 2 print(\u0026#34;This is line 1\\tThis is line 2) Handling Input\r#\r\r\u0026#39;\u0026#39;\u0026#39; Output: Enter user input: [input] What you typed: [user input relayed] \u0026#39;\u0026#39;\u0026#39; user_input = input(\u0026#34;Enter user input: \u0026#34;) print(\u0026#34;What you typed:\u0026#34;, user_input) \u0026#39;\u0026#39;\u0026#39; Output: Enter an integer: [input] Input num squared: [input^2] \u0026#39;\u0026#39;\u0026#39; num = eval(input(\u0026#34;Enter an integer: \u0026#34;)) print(\u0026#34;Input num squared:\u0026#34;, str(num ** 2)) Libraries\r#\r\rImporting\r#\r\rimport math math.sqrt(9) math.floor(4.3) import math as m m.sqrt(9) m.floor(4.3) from math import sqrt, floor sqrt(9) floor(4.3) Conditionals\r#\r\rLogical Operators\r#\r\rTrue == True # True True == False # False 4 == 4 # True 4 == 5 # False \u0026#34;UT\u0026#34; == \u0026#34;UT\u0026#34; # True \u0026#34;UT\u0026#34; == \u0026#34;UTe\u0026#34; # False \u0026#34;UT\u0026#34; == \u0026#34;UT \u0026#34; # False not True # False not False # True True != False # True True != True # False True != not True # ... True True and True # True True and False # False False and False # False True or True # True True or False # True False or False # False Comparison Operators\r#\r\r# Technically == and != are comparison operators 5 \u0026gt; 4 # True 4 \u0026gt; 4 # False 3 \u0026gt; 4 # False 5 \u0026gt; 4 \u0026gt; 3 # True 5 \u0026gt;= 4 # True 4 \u0026gt;= 4 # True 3 \u0026gt;= 4 # False 5 \u0026lt; 4 # False 4 \u0026lt; 4 # False 3 \u0026lt; 4 # True 3 \u0026lt; 4 \u0026lt; 5 # True 5 \u0026lt;= 4 # False 4 \u0026lt;= 4 # True 3 \u0026lt;= 4 # True if Statements\r#\r\rif True: print(\u0026#34;This always prints\u0026#34;) print(\u0026#34;There can be multiple lines\u0026#34;) if var_1 == var_2 or var_2 == var_3: print(\u0026#34;Two variables are equal\u0026#34;) if var_1 == var_2 and var_2 == var_3: print(\u0026#34;All three variables are equal\u0026#34;) # If the conditional is a string tests if the # string is non-empty if \u0026#34;abc\u0026#34;: print(\u0026#34;This always prints\u0026#34;) if \u0026#34;\u0026#34;: print(\u0026#34;This never prints\u0026#34;) # If the conditional is a number tests if the # number is not zero if 1: print(\u0026#34;This always prints\u0026#34;) if 0: print(\u0026#34;This never prints\u0026#34;) Multi-line conditions\r#\r\rif var_1 == var_2 or var_1 == var_3 or \\ var_1 == var_4: print(\u0026#34;Var 1 equals some other variable\u0026#34;) if (var_1 == var_2 and var_1 == var_3 and var_1 == var_4): print(\u0026#34;All variables are equal\u0026#34;) if/elif/else Statements\r#\r\rif (month == \u0026#34;December\u0026#34; or month == \u0026#34;January\u0026#34; or month == \u0026#34;February\u0026#34;): print(\u0026#34;It\u0026#39;s winter\u0026#34;) elif (month == \u0026#34;March\u0026#34; or month == \u0026#34;May\u0026#34; or month == \u0026#34;April\u0026#34;): print(\u0026#34;It\u0026#39;s spring\u0026#34;) elif (month == \u0026#34;June\u0026#34; or month == \u0026#34;July\u0026#34; or month == \u0026#34;August\u0026#34;): print(\u0026#34;It\u0026#39;s summer\u0026#34;) else: print(\u0026#34;It\u0026#39;s fall! My favorite.\u0026#34;) Iteration\r#\r\rwhile Loops\r#\r\rcount = 0 total = 0 while count \u0026lt; 1000: total += count count = 0 total = 0 while count \u0026lt; 1000 and not (count \u0026gt; 100 and count % 17 != 0): total += count for Loops\r#\r\r# Output: 0 1 2 ... 9 for i in range(10): print(str(i) + \u0026#34; \u0026#34;) # Output: 3 4 5 ... 9 for i in range(3, 10): print(str(i) + \u0026#34; \u0026#34;) # Output: 3 5 7 ... 19 for i in range(3, 20, 2): print(str(i) + \u0026#34; \u0026#34;) Functions\r#\r\rDefining\r#\r\r# Output: This works!  def simple_func(): print(\u0026#34;This works!\u0026#34;) simple_func() Returning\r#\r\r# Output: 3 def simple_sum(x, y): return x + y print(simple_sum(1, 2)) # Output: 6 0 1 9 def simple_ops(x, y): return x + y, x - y, x / y, x * y add, sub, div, mult = simple_ops(3, 3) print(add, sub, div, mult) Classes\r#\r\rDeclaration\r#\r\rclass ClassName: # Constructor for class. If you create an object of this class # this function is executed when the object is made. # var_2 is assigned a default value in case none is provided def __init__(self, var_1, var_2 = 0): # self.____ are instance variables - Each object gets their # own  self.var_1 = var_1 self.var_2 = var_2 def do_something(self, some_val): difference = self.var_2 - some_val self.var_1 += some_val return difference Creating Objects\r#\r\rsome_obj = ClassName(4, 3) Using Objects\r#\r\rsome_obj.do_something(3) x = some_obj.do_something(5) print(x) Data Structures\r#\r\rStrings\r#\r\rInitializing:\r#\r\rtest_str = \u0026#34;some string\u0026#34; Indexing\r#\r\r# Output: 2 print(test_str[2]) Slicing\r#\r\r# Output: string string print(test_str[4:10], test_str[4:]) # Output: some print(test_str[:-6]) # Output: sm tig print(test_str[::2]) Iterating\r#\r\r# Output: ss for let in test_str: if let == \u0026#34;s\u0026#34; print(\u0026#34;s\u0026#34;, end=\u0026#34;\u0026#34;) * Operator\r#\r\r# Output: sssssnake print(\u0026#34;s\u0026#34; * 5 + \u0026#34;nake\u0026#34;) Lists\r#\r\rInitializing:\r#\r\rtest_list = [] # [1, 1, 1, 1, 1] test_list = [1] * 5 test_list = [5, 1, 4, 2, 10] Indexing\r#\r\r# Output: 4 print(test_list[2]) Slicing\r#\r\r# Output: [4, 2, 10] print(test_list[2:5], test_list[2:]) # Output: [1, 4, 2, 10] print(test_list[:-4]) # Output: [5, 4, 10] print(test_list[::2]) Modifying\r#\r\r# Output: [5, 5, 4] test_list[1] = 5 print(test_list[:2]) Iterating\r#\r\r# Output: 22 total = 0 test_list = [5, 1, 4, 2, 10] for num in test_list: total += num print(total) "},{"id":6,"href":"/~ves314/docs/ta/cs303e/exercises/ch2/","title":"Chapter 2","section":"Exercises","content":"Chapter 2 Exercise Solutions\r#\r\rDownload Solutions\nEmbedded solutions:\n# Exercies for Chapter 2 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) # 2.1 celsius = eval(input(\u0026#34;Enter a degree in Celsius: \u0026#34;)) fahrenheit = (9 / 5) * celsius + 32 print(celsius, \u0026#34;Celsius is\u0026#34;, fahrenheit, \u0026#34;Fahrenheit\u0026#34;) # 2.2 radius, length = eval(input(\u0026#34;Enter area and volume: \u0026#34;)) area = radius * radius * 3.14 volume = area * length print(\u0026#34;The area is\u0026#34;, area) print(\u0026#34;The volume is\u0026#34;, volume) # 2.3 feet = eval(input(\u0026#34;Enter a value for feet: \u0026#34;)) meters = feet * .305 print(feet, \u0026#34;feet is\u0026#34;, meters, \u0026#34;meters\u0026#34;) # 2.4 pounds = eval(input(\u0026#34;Enter a value in pounds: \u0026#34;)) kilograms = pounds * .454 print(pounds, \u0026#34;pounds is\u0026#34;, kilograms, \u0026#34;kilograms\u0026#34;) # 2.5 subtotal, gratuity_rate = eval(input(\u0026#34;Enter the subtotal and a gratuity rate: \u0026#34;)) gratuity = subtotal * gratuity_rate/100 total = subtotal + gratuity # Don\u0026#39;t think rounding to n digits have been covered yet ... using it anyway print(\u0026#34;The gratuity is\u0026#34;, round(gratuity, 2), \u0026#34;and the total is\u0026#34;, round(total, 2)) # 2.6 total = 0 num = eval(input(\u0026#34;Enter a number between 0 and 1000: \u0026#34;)) total += num % 10 num //= 10 total += num % 10 num //= 10 total += num % 10 num //= 10 total += num % 10 num //= 10 print(\u0026#34;The sum of the digits is\u0026#34;, total) # 2.7 mins = eval(input(\u0026#34;Enter the number of minutes: \u0026#34;)) total_days = mins // 60 // 24 years = total_days // 365 remainder_days = total_days % 365 print(mins, \u0026#34;minutes is approximately\u0026#34;, years, \u0026#34;years and\u0026#34;, remainder_days, \u0026#34;days\u0026#34;) # 2.9 fahrenheit = eval(input(\u0026#34;Enter the temeprature in Fahrenheit between -58 and 41: \u0026#34;)) wind_speed = eval(input(\u0026#34;Enter the wind speed in miles per hour: \u0026#34;)) # Adjust wind speed to v^.16 wind_speed **= .16 wind_chill = (35.74 + (0.6215 * fahrenheit) - (35.75 * wind_speed) + (0.4275 * fahrenheit * wind_speed)) # Again the answer is rounded despite the textbook not covering rounding to n digits print(\u0026#34;The wind chill index is\u0026#34;, round(wind_chill, 5)) # 2.10 speed, accel = eval(input(\u0026#34;Enter speed and acceleration: \u0026#34;)) length = speed ** 2 / (2 * accel) print(\u0026#34;The minimum runway length for this airplane is\u0026#34;, round(length, 3), \u0026#34;meters\u0026#34;) # 2.16 v_0, v_1, t = eval(input(\u0026#34;Enter v0, v1, and t: \u0026#34;)) avg_accel = (v_1 - v_0)/t print(\u0026#34;The average acceleration is\u0026#34;, round(avg_accel, 4)) # 2.22 years = eval(input(\u0026#34;Enter the number of years: \u0026#34;)) population = 312032486 + ((years * 365 * 24 * 60 * 60 // 7) + (years * 365 * 24 * 60 * 60 // 45) - (years * 365 * 24 * 60 * 60 // 13)) print(\u0026#34;The population in\u0026#34;, years, \u0026#34;years is\u0026#34;, population) "},{"id":7,"href":"/~ves314/docs/ta/cs303e/review/final/","title":"Final","section":"Exam Reviews","content":"Free Response Final Review\r#\r\rClasses\r#\r\rStacks\r#\r\rStacks are a commonly used data structure in computer science, and especially for memory: Quite complicated. However, the foundation of stacks is quite simple. Just think of \u0026lsquo;em as pancakes!\nIf you wanted to add to a stack, where would you add it to? Well, of course the top, since it\u0026rsquo;d be a hastle and borderline dangerous to your breakfast to lift up a bunch of pancakes for no reason. Similarly, if you were to remove from a stack, where would you remove from? Also the top. Why would you try to risk your breakfast to pick a colder pancake? As a result, elements in a stack are what are called FIFO (first-in-first-out). HEre\u0026rsquo;s a video that briefly explains them as well:\n  You can also watch a video of one here which is useful for evaluating mathematical expressions in computers in the correct order:\n  For our purpose, we\u0026rsquo;re going to make a stack class with four methods and a constructor. The methods are defined as follows:\n A constructor that takes in no parameter. This method creates a private list which will be used as the underlying data structure to act as the stack. A push method. This pushes a passed element onto the top of the stack. A pop method. This method removes an element from the top of the stack and returns it once removed. A peek method. This method checks out what element is currently on top of the stack without modifying the stack itself. A str method. This method returns our underlying list as a string.  For example, the following code:\nstack = Stack() stack.push(1) stack.push(1) stack.push(3) print(stack.peek()) print(stack.pop()) stack.push(5) print(stack) Outputs:\n3\r3\r[1, 1, 5]\rFibonacci\r#\r\rRecall from the midterm that fibonacci numbers are defined as so: \r\r\\[\rF_n = F_{n - 1} \u0026#43; F_{n - 2}\\\\\rF_0 = 0, F_1 = 1\r\\]\r\rWhich means the first few fibonacci numbers are the following: 0, 1, 1, 2, 3, 5, 8, 13, \u0026hellip; Essentially, the next fibonacci number is the sum of the previous two fibonacci numbers.\nCreate a class that generates and stores fibonacci numbers. The class contains the following methods:\n A constructor method with a single parameter. This parameter which has a default value of 10 determines how many of the first fibonacci numbers should be generated. This method should also create a list as an instance variable that will store all the fibonacci numbers, where the nth index in the list is the nth fibonacci number.  For example, the 0th index in the list should be 0, the 5th index in the list should be 5, and the 6th index in the list should be 8.   A print_num method that will print the following when a number, n, is passed in:  If the nth fibonacci number has not been generated yet:  nth fibonacci number has not been generated   If the nth fibonacci number has been generated:  nth finbonacci number is (fibonacci number here)     A gen_next method that will generate the next fibonacci number not yet generated, and this new number will be appended onto the end of the fibonacci list A gen_next_n method that will generate the next (as a parameter) n fibonacci numbers not yet generated, and these numbers will be appended onto the end of the fibonacci list A gen_until method that will generate fibonacci numbers up to (as a parameter) the nth fibonacci number.  For example, the following code:\nfib = Fibonacci() fib.print_num(0) fib.print_num(5) fib.print_num(11) fib.gen_next() fib.print_num(11) fib.gen_next_n(100) fib.print_num(111) fib.print_num(112) fib.print_num(1100) fib.gen_until(1100) fib.print_num(1100) Outputs:\n0th fibonacci number is 0\r5th fibonacci number is 5\r11th fibonacci number has not been generated\r11th fibonacci number is 89\r111th fibonacci number is 70492524767089125814114\r112th fibonacci number has not been generated\r1100th fibonacci number has not been generated\r1100th fibonacci number is 34428592852410271940083613070919630635781894724017874396545964292826864597491403229723364359749415183436491553996529359881593653825629442519718308678951540824183325844045884746598230684751416672062124540392876245684047939604503325\rFun fact: This method is extremely fast at generating fibonacci numbers as you only use the previous two result to calculate the next result. This is called caching your result, and can be thought of as a simple case of a programming strategy called dynamic programming.\nLists\r#\r\rlast_index_of\r#\r\rThe following method is based off of a question on Mike\u0026rsquo;s 2019 CS 312 Final.\nWrite the following function:\ndef last_index_of(num_list, n)\nwhere num_list is a list of numbers, and n is a particular number.\nThe method returns a list that represents the last index of each value between [0, n] in the list.\nFor example, given the following list: \\( [5, 0, 3, 12, 3, 7, 0, -3, 36]\\) The function returns the following if n = 3: \\( [6, -1, -1, 4]\\)\n(The last appearance of 0 in the passed list was index 6, 1 and 2 never appeared in the list, and the last appearance of 3 in the passed list was index 4).\nFor this function, you\u0026rsquo;re not allowed to use rindex.\nis_distinct_column_sum\r#\r\rWrite a method is_distinct_column_sum that, given a list of lists (where each row has the same number of columns) of ints and a column index, returns true if the sum of values in each column is distinct compared to the column index in the passed list. The method is as follows:\ndef is_distinct_column_sum(num_list, col_index)\nFor example, in the following list of lists: \r\\[\r\\begin{bmatrix}\r8 \u0026amp; 7 \u0026amp; 4 \u0026amp; 3 \u0026amp; 3 \u0026amp; 4 \u0026amp; -7 \\\\\r6 \u0026amp; 1 \u0026amp; 2 \u0026amp; 3 \u0026amp; 2 \u0026amp; 0 \u0026amp; 3 \\\\\r8 \u0026amp; 11 \u0026amp; 0 \u0026amp; 5 \u0026amp; 2 \u0026amp; 7 \u0026amp; 3 \\\\\r8 \u0026amp; 9 \u0026amp; 1 \u0026amp; 2 \u0026amp; 7 \u0026amp; 2 \u0026amp; -8 \\\\\r4 \u0026amp; 2 \u0026amp; 5 \u0026amp; 8 \u0026amp; 1 \u0026amp; 2 \u0026amp; -5 \\\\\r\\end{bmatrix}\r\\]\r\rThe sums of columns are \\([34, 30, 12, 21, 15, 15, -14]\\). So, if the passed column index was 1, this would return true since no other column sums up to 30. However, if the passed column index was 4, this method would return false since both column 4 and 5 add up to 15.\nDictionaries\r#\r\rCounting Part 2\r#\r\rCounting in probability and discrete math have a more complete meaning than the every day meaning. Essentially, counting is determining the total number of elements in a set. This really is what we do when we count normally, but this can be taken much further:\nIn mathematics, if you have \\(n\\) unique objects together, the amount of unique orderings is simply:\n\r\\[\r\\text{Unique Combinations} = n!\\\\\rn! = n \\cdot (n - 1) \\cdot (n - 2) \\cdot ... \\cdot 3 \\cdot 2 \\cdot 1\r\\]\r\rThis can be used to calculate the number of unique orderings of letters in a word. For example, according to this formula, cat should have 6 unique ordering of letters since there are 3 unique letters, so \\(n = 3\\):\n   # Word # Word     1 cat 3 tca   2 cta 4 tac   5 act 6 atc    However, consider the case with eel. If all three letters were unique there would be 6 unique combinations, but since there are two es, how many combinations can we really make?\n   # Word     1 eel   2 ele   3 lee    As it turns out, the more useful formula for unique combinations is as follows, where \\( a_k \\) is the # of occurences of the identical objects in the entire group. For example, in eel, \\( a_e = 2 \\):\n$$ \\text{Unique Combinations} = \\dfrac{n!}{a_1!a_2! \u0026hellip; a_k!} $$\nFor this problem, we\u0026rsquo;re going to calculate the unique combinations of any lower-case word passed into the following function:\ndef count_unqiue_words(word)\nSamples:\ncats: count_unqiue_words(\u0026quot;cats\u0026quot;) = 24\rmississippi: count_unqiue_words(\u0026quot;mississippi\u0026quot;) = 34650\rRecursion\r#\r\rClimbing Stairs\r#\r\rLet\u0026rsquo;s say you got some good legs. You can either skip one stair at a time or two. However, one day during quarantine when we all have too much time, you wonder how many different combinations of climbing the stairs are possible. For example, if you had a staircase with 5 stairs. There are many different ways to climb this set with your skills:\n\r\\[\r[1, 1, 1, 1, 1]\\\\\r[1, 1, 1, 2]\\\\\r[1, 1, 2, 1]\r...\r\\]\r\rInstead of climbing all the ways manually, you realize it may be better to create a program, that, given n amount of stairs, will determine all the different ways to climb up the stairs.\nWrite the following functions\ndef ways_to_climb(num_stairs, cur_list)\nWhich prints out lists, where each list represents a unique way to climb the stairs.\nFun fact: The number of stair combinations based on the total number of stairs follows the Fibonacci numbers, as the logic is really just the fibonacci algorithm in disguise.\nHint: The parameter cur_list for this is a bit strange, so I\u0026rsquo;ll help you out. Essentially cur_list stores the current list we\u0026rsquo;ll be using to track our previous steps. In this case, we don\u0026rsquo;t need anything in this list to begin with, so we\u0026rsquo;ll just start with it as an empty list. Consider it a temporary container we\u0026rsquo;ll be using to store all the different possibilities. You should not need to delete anything from this list in your function to get the correct output. For example, a proper function call would look like: ways_to_climb(3, [])\nTo check your answers:\nways_to_climb(3, []) outputs:\n[1, 1, 1] [1, 2] [2, 1] and\nways_to_climb(4, []) outputs:\n[1, 1, 1, 1] [1, 1, 2] [1, 2, 1] [2, 1, 1] [2, 2] Counting Part 3\r#\r\rTHIS IS WAY BEYOND THE DIFFICULTY OF WHAT Y\u0026rsquo;ALL ARE EXPECTED TO DO. PROCEED WITH CAUTION.\r#\r\rBased off of a random reddit thread where my reply is the answer to this question: Reference Counting Part 2 on the table of contents for the background behind permutating words. In this case, using recursion, we\u0026rsquo;ll actually create all the unique permutations for a given word. Write the following function:\ndef create_permutations(letter_bank, cur_word, perm_set)\nWhere letter_bank is the given word we want to create permutations of, cur_word is a temporary variable to help us create permutations, and perm_set is the set of all unique word permutations of letter_bank.\nHint: Again, the setup is a bit strange for this method like with climbing stairs, so I\u0026rsquo;ll help you out. letter_bank is the string of characters for our current permutation not yet used. cur_word are the letters we\u0026rsquo;ve used so far in our current iteration (so when we start out this will be empty). perm_set is just used to hold all of our finished permutations so far. As a result, when we start out, we want this to be empty. So some code like the following will help get you on your way for using the function. Actually programming it is up to you:\nword_set = set() create_permutations(\u0026#34;cats\u0026#34;, \u0026#34;\u0026#34;, word_set) print(word_set) As for results, here are some examples:\ncreate_permutations(\u0026#34;cat\u0026#34;, \u0026#34;\u0026#34;, word_set) outputs:\n{\u0026#39;atc\u0026#39;, \u0026#39;cat\u0026#39;, \u0026#39;tac\u0026#39;, \u0026#39;tca\u0026#39;, \u0026#39;act\u0026#39;, \u0026#39;cta\u0026#39;} create_permutations(\u0026#34;cats\u0026#34;, \u0026#34;\u0026#34;, word_set) outputs:\n{\u0026#39;cats\u0026#39;, \u0026#39;ctas\u0026#39;, \u0026#39;stac\u0026#39;, \u0026#39;tcas\u0026#39;, \u0026#39;tasc\u0026#39;, \u0026#39;tacs\u0026#39;, \u0026#39;ctsa\u0026#39;, \u0026#39;scta\u0026#39;, \u0026#39;tcsa\u0026#39;, \u0026#39;astc\u0026#39;, \u0026#39;tsca\u0026#39;, \u0026#39;atsc\u0026#39;, \u0026#39;atcs\u0026#39;, \u0026#39;csat\u0026#39;, \u0026#39;acts\u0026#39;, \u0026#39;tsac\u0026#39;, \u0026#39;satc\u0026#39;, \u0026#39;scat\u0026#39;, \u0026#39;asct\u0026#39;, \u0026#39;sact\u0026#39;, \u0026#39;acst\u0026#39;, \u0026#39;csta\u0026#39;, \u0026#39;cast\u0026#39;, \u0026#39;stca\u0026#39;} and\ncreate_permutations(\u0026#34;alabama\u0026#34;, \u0026#34;\u0026#34;, word_set) outputs:\n{\u0026#39;baaamal\u0026#39;, \u0026#39;bamlaaa\u0026#39;, \u0026#39;maalaab\u0026#39;, \u0026#39;aaabalm\u0026#39;, \u0026#39;laaaabm\u0026#39;, \u0026#39;almbaaa\u0026#39;, \u0026#39;alambaa\u0026#39;, \u0026#39;maaalba\u0026#39;, \u0026#39;aaalmab\u0026#39;, \u0026#39;aaambla\u0026#39;, \u0026#39;aalabma\u0026#39;, \u0026#39;aaaalmb\u0026#39;, \u0026#39;abmaaal\u0026#39;, \u0026#39;aaaabml\u0026#39;, \u0026#39;blaamaa\u0026#39;, \u0026#39;aaalmba\u0026#39;, \u0026#39;ablaama\u0026#39;, \u0026#39;abaalam\u0026#39;, \u0026#39;bmalaaa\u0026#39;, \u0026#39;aalamab\u0026#39;, \u0026#39;aalmbaa\u0026#39;, \u0026#39;baamaal\u0026#39;, \u0026#39;aaablma\u0026#39;, \u0026#39;mlbaaaa\u0026#39;, \u0026#39;laaamba\u0026#39;, \u0026#39;lbamaaa\u0026#39;, \u0026#39;amabala\u0026#39;, \u0026#39;aaamlba\u0026#39;, \u0026#39;albmaaa\u0026#39;, \u0026#39;malbaaa\u0026#39;, \u0026#39;ablamaa\u0026#39;, \u0026#39;lamaaba\u0026#39;, \u0026#39;alabama\u0026#39;, \u0026#39;baaaaml\u0026#39;, \u0026#39;abaalma\u0026#39;, \u0026#39;bamalaa\u0026#39;, \u0026#39;aambaal\u0026#39;, \u0026#39;maaaabl\u0026#39;, \u0026#39;aambala\u0026#39;, \u0026#39;balaama\u0026#39;, \u0026#39;mabaala\u0026#39;, \u0026#39;aamalba\u0026#39;, \u0026#39;labamaa\u0026#39;, \u0026#39;amalaab\u0026#39;, \u0026#39;aablama\u0026#39;, \u0026#39;aabaalm\u0026#39;, \u0026#39;aablaam\u0026#39;, \u0026#39;baaaalm\u0026#39;, \u0026#39;maaaalb\u0026#39;, \u0026#39;aalbmaa\u0026#39;, \u0026#39;lambaaa\u0026#39;, \u0026#39;mbaaaal\u0026#39;, \u0026#39;malabaa\u0026#39;, \u0026#39;maalbaa\u0026#39;, \u0026#39;aamlaba\u0026#39;, \u0026#39;laabmaa\u0026#39;, \u0026#39;baalmaa\u0026#39;, \u0026#39;aaalamb\u0026#39;, \u0026#39;lbaamaa\u0026#39;, \u0026#39;amaaabl\u0026#39;, \u0026#39;alaamba\u0026#39;, \u0026#39;amlbaaa\u0026#39;, \u0026#39;amaaalb\u0026#39;, \u0026#39;lmaaaba\u0026#39;, \u0026#39;aaalabm\u0026#39;, \u0026#39;mlaaaba\u0026#39;, \u0026#39;alabaam\u0026#39;, \u0026#39;abamlaa\u0026#39;, \u0026#39;laaabma\u0026#39;, \u0026#39;lbaaama\u0026#39;, \u0026#39;lmbaaaa\u0026#39;, \u0026#39;mlaabaa\u0026#39;, \u0026#39;abalaam\u0026#39;, \u0026#39;aaaamlb\u0026#39;, \u0026#39;laamaab\u0026#39;, \u0026#39;aaalbam\u0026#39;, \u0026#39;bamaaal\u0026#39;, \u0026#39;aabamla\u0026#39;, \u0026#39;mabaaal\u0026#39;, \u0026#39;aamblaa\u0026#39;, \u0026#39;blamaaa\u0026#39;, \u0026#39;ablmaaa\u0026#39;, \u0026#39;labaama\u0026#39;, \u0026#39;lbaaaam\u0026#39;, \u0026#39;aabalam\u0026#39;, \u0026#39;abmlaaa\u0026#39;, \u0026#39;mabalaa\u0026#39;, \u0026#39;baalama\u0026#39;, \u0026#39;mlaaaab\u0026#39;, \u0026#39;bamaala\u0026#39;, \u0026#39;blaaama\u0026#39;, \u0026#39;maalaba\u0026#39;, \u0026#39;amblaaa\u0026#39;, \u0026#39;amlaaba\u0026#39;, \u0026#39;alamaba\u0026#39;, \u0026#39;alaaamb\u0026#39;, \u0026#39;abmalaa\u0026#39;, \u0026#39;amalaba\u0026#39;, \u0026#39;aaambal\u0026#39;, \u0026#39;amaalba\u0026#39;, \u0026#39;abaamla\u0026#39;, \u0026#39;aabmaal\u0026#39;, \u0026#39;ablaaam\u0026#39;, \u0026#39;aalmaba\u0026#39;, \u0026#39;aaamalb\u0026#39;, \u0026#39;baaamla\u0026#39;, \u0026#39;bmaaala\u0026#39;, \u0026#39;amaabla\u0026#39;, \u0026#39;alamaab\u0026#39;, \u0026#39;aabmlaa\u0026#39;, \u0026#39;abamala\u0026#39;, \u0026#39;aablmaa\u0026#39;, \u0026#39;abamaal\u0026#39;, \u0026#39;aalbaam\u0026#39;, \u0026#39;aamabla\u0026#39;, \u0026#39;laambaa\u0026#39;, \u0026#39;almaaab\u0026#39;, \u0026#39;aaabaml\u0026#39;, \u0026#39;aamabal\u0026#39;, \u0026#39;maaabla\u0026#39;, \u0026#39;baaalma\u0026#39;, \u0026#39;mbalaaa\u0026#39;, \u0026#39;labmaaa\u0026#39;, \u0026#39;alabmaa\u0026#39;, \u0026#39;maaabal\u0026#39;, \u0026#39;mblaaaa\u0026#39;, \u0026#39;aamalab\u0026#39;, \u0026#39;amlabaa\u0026#39;, \u0026#39;bmlaaaa\u0026#39;, \u0026#39;laabama\u0026#39;, \u0026#39;ambaala\u0026#39;, \u0026#39;balamaa\u0026#39;, \u0026#39;baamlaa\u0026#39;, \u0026#39;malaaab\u0026#39;, \u0026#39;mbaaala\u0026#39;, \u0026#39;aalaamb\u0026#39;, \u0026#39;aaamabl\u0026#39;, \u0026#39;abaamal\u0026#39;, \u0026#39;almabaa\u0026#39;, \u0026#39;aaabmla\u0026#39;, \u0026#39;amalbaa\u0026#39;, \u0026#39;lmabaaa\u0026#39;, \u0026#39;balmaaa\u0026#39;, \u0026#39;baamala\u0026#39;, \u0026#39;laaaamb\u0026#39;, \u0026#39;albaaam\u0026#39;, \u0026#39;aamlaab\u0026#39;, \u0026#39;labaaam\u0026#39;, \u0026#39;bmaalaa\u0026#39;, \u0026#39;bmaaaal\u0026#39;, \u0026#39;albaama\u0026#39;, \u0026#39;lbmaaaa\u0026#39;, \u0026#39;aamaabl\u0026#39;, \u0026#39;laabaam\u0026#39;, \u0026#39;amlaaab\u0026#39;, \u0026#39;abaaalm\u0026#39;, \u0026#39;aalabam\u0026#39;, \u0026#39;laaamab\u0026#39;, \u0026#39;lmaabaa\u0026#39;, \u0026#39;aaaambl\u0026#39;, \u0026#39;mlabaaa\u0026#39;, \u0026#39;aabaaml\u0026#39;, \u0026#39;amaalab\u0026#39;, \u0026#39;aamlbaa\u0026#39;, \u0026#39;maabaal\u0026#39;, \u0026#39;malaaba\u0026#39;, \u0026#39;lamaaab\u0026#39;, \u0026#39;alaaabm\u0026#39;, \u0026#39;abalmaa\u0026#39;, \u0026#39;aaaablm\u0026#39;, \u0026#39;amablaa\u0026#39;, \u0026#39;balaaam\u0026#39;, \u0026#39;albamaa\u0026#39;, \u0026#39;aabamal\u0026#39;, \u0026#39;blmaaaa\u0026#39;, \u0026#39;maaalab\u0026#39;, \u0026#39;aalbama\u0026#39;, \u0026#39;ambaaal\u0026#39;, \u0026#39;abaaaml\u0026#39;, \u0026#39;mablaaa\u0026#39;, \u0026#39;amabaal\u0026#39;, \u0026#39;aabmala\u0026#39;, \u0026#39;lmaaaab\u0026#39;, \u0026#39;aabalma\u0026#39;, \u0026#39;almaaba\u0026#39;, \u0026#39;aaalbma\u0026#39;, \u0026#39;blaaaam\u0026#39;, \u0026#39;aalaabm\u0026#39;, \u0026#39;maablaa\u0026#39;, \u0026#39;amaabal\u0026#39;, \u0026#39;alaabam\u0026#39;, \u0026#39;aamaalb\u0026#39;, \u0026#39;abmaala\u0026#39;, \u0026#39;alaabma\u0026#39;, \u0026#39;laaabam\u0026#39;, \u0026#39;aaamlab\u0026#39;, \u0026#39;aaablam\u0026#39;, \u0026#39;aaabmal\u0026#39;, \u0026#39;aalamba\u0026#39;, \u0026#39;abalama\u0026#39;, \u0026#39;ambalaa\u0026#39;, \u0026#39;baalaam\u0026#39;, \u0026#39;laamaba\u0026#39;, \u0026#39;mbaalaa\u0026#39;, \u0026#39;baaalam\u0026#39;, \u0026#39;alaamab\u0026#39;, \u0026#39;aalmaab\u0026#39;, \u0026#39;lamabaa\u0026#39;, \u0026#39;aaaalbm\u0026#39;, \u0026#39;maabala\u0026#39;} I\u0026rsquo;m not showing you what mississippi generates nope\nSolutions\r#\r\rStacks\r#\r\rclass Stack: def __init__(self): self.__stack__ = [] def push(self, elem): self.__stack__.append(elem) def pop(self): return self.__stack__.pop(len(self.__stack__) - 1) def peek(self): return self.__stack__[-1] def __str__(self): return str(self.__stack__) Fibonacci\r#\r\rclass Fibonacci: def __init__(self, gen_num = 10): self.fib_list = [0, 1] for i in range(gen_num - 1): self.gen_next() def print_num(self, num): if num \u0026lt; len(self.fib_list): print(str(num) + \u0026#34;th fibonacci number is\u0026#34;, self.fib_list[num]) else: print(str(num) + \u0026#34;th fibonacci number has not been generated\u0026#34;) def gen_next(self): self.fib_list.append(self.fib_list[-1] + self.fib_list[-2]) def gen_next_n(self, n): for i in range(n): self.gen_next() def gen_until(self, n): for i in range(n - len(self.fib_list) + 1): self.gen_next() last_index_of\r#\r\rdef last_index_of(num_list, n): res_list = [-1] * (n + 1) for i in range(len(res_list)): for j in range(len(num_list)): if num_list[j] == i: res_list[i] = j return res_list is_distinct_column_sum\r#\r\rdef is_distinct_column_sum(num_list, col_index): check_sum = 0 for row in num_list: check_sum += row[col_index] for col in range(len(num_list[0])): if col != col_index: col_sum = 0 for row in range(len(num_list)): col_sum += num_list[row][col] if check_sum == col_sum: return False return True Counting Part 2\r#\r\rdef count_unqiue_words(word): char_count = {} for char in word: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 div = 1 for i in char_count: div *= factorial(char_count[i]) return factorial(len(word)) // div def factorial(n): num = 1 for i in range(2, n + 1): num *= i return num Climbing Stairs\r#\r\rdef ways_to_climb(num_stairs, cur_list): if num_stairs == 0: print(cur_list) elif num_stairs \u0026gt; 0: ways_to_climb(num_stairs - 1, cur_list + [1]) ways_to_climb(num_stairs - 2, cur_list + [2]) Counting Part 3\r#\r\rdef create_permutations(letter_bank, cur_word, perm_set): if len(letter_bank) == 0: word_set.add(cur_word) else: for i in range(len(letter_bank)): tmp_cur = cur_word + letter_bank[i] tmp_letter_bank = letter_bank[:i] + letter_bank[i + 1:] create_permutations(tmp_letter_bank, tmp_cur, perm_set) "},{"id":8,"href":"/~ves314/docs/ta/cs314/practice/","title":"Practice","section":"CS 314","content":"Supplemental Practice for CS 314\r#\r\rThis directory covers topics that aren\u0026rsquo;t as focused on in our assignments. The best way to practice for these topics is by running through past exams, but it may be difficult to want to look at exams before we\u0026rsquo;ve learned most of the material for them.\nSo, this page has multiple resources to practice these topics with questions I make or pluck from the internet, along with files to help you check your answers and create your own review!\nPractice! Practice! Practice!\n"},{"id":9,"href":"/~ves314/docs/ta/cs314/slides/","title":"Slides","section":"CS 314","content":"Discussion Section Slides for CS 314\r#\r\r   Date Topics Slides     1/31 Intro, IntList Slides   2/7 Polymorphism, Babynames Slides   2/14 Generic List, Bag Slides   2/28 Exam Review Slides    "},{"id":10,"href":"/~ves314/docs/ta/cs303e/style/","title":"Style","section":"CS 303E","content":"Python Style Guide for CS 303E\r#\r\rHighlights\r#\r\rThe following are highlighted style guidelines to follow based off the assignment page here.\nTwo Blank Lines\r#\r\rThis highlight states to include two blank lines both before and after our function:\n# ... # Grader: Skyler # # On my honor, Skyler Vestal, this programming assignment is my own work # and I have not provided this code to any other student. import random # Here\u0026#39;s a summary comment about the main method def main(): # Estimates my test scores in CS 439 MAX_POITNS = 100 count = random.randint(10, 20) print(count/MAX_POITNS) main() So the two blank lines both above def main() and after the last line within the main method are not overridden by comments. Always make sure there are two lines before and after!\nFour Spaces per Indent\r#\r\rdef main(): ... if check_1 \u0026gt; num_1: index = 0 count = 0 while index \u0026lt; check_1: count += index if (count % 31 == 0): break print(count) else: print(\u0026#34;Nothing.\u0026#34;) ... Limitting Lines\r#\r\rLines are limitted to 79 characters.\ndef main(): month == input(\u0026#34;You know what a month is? Like the \u0026#34; + \u0026#34;arbitrary assignments of groups of days in a year.\\n\u0026#34; + \u0026#34;Why is October the 10th month and not the 8th?\\n\u0026#34; + \u0026#34;Why is December the 12th month and not the 10th?\\n\u0026#34; + \u0026#34;I heard someone added in two months or something. \u0026#34; + \u0026#34;I\u0026#39;d guess July and August cause those sound like \u0026#34; + \u0026#34;Julius and August. Not sure.\\nHow come the months \u0026#34; + \u0026#34;only start being numerical after August? \u0026#34; + \u0026#34;Why is November an exception? Strange.\\n\u0026#34; + \u0026#34;Oh sorry, anyway enter a month: \u0026#34; ) if (month == \u0026#34;January\u0026#34; or month == \u0026#34;February\u0026#34; or month == \u0026#34;March\u0026#34; or month == \u0026#34;April\u0026#34; or month == \u0026#34;June\u0026#34;): print(\u0026#34;This month is in the first half of the year.\u0026#34;) if month == \u0026#34;January\u0026#34; or month == \u0026#34;June\u0026#34; or month == \u0026#34;July\u0026#34; \\ or month == \u0026#34;October\u0026#34;: print(\u0026#34;This month starts with a letter I think is weird\u0026#34;) Limiting Comment Lines\r#\r\rdef main(): # This line can go a fair bit out but I have to stop here sadly =(. print(\u0026#34;However, I can go a bit farther out. Silly comment. Be jealous =)\u0026#34;) Using Blank Lines\r#\r\rBlank lines are useful for organizing sections of code within a singular function. Make sure to make a summary comment for each non-trivial section of code.\n# Gather user inputs input_1 = input(\u0026#34;Enter a number please: \u0026#34;) input_2 = eval(input(\u0026#34;Hey uhh I\u0026#39;m going to trust you to enter a #: )) input_3 = input(\u0026#34;I feel bad for restricting you so enter anything\u0026#34;) # Do some arbitrary calculations foo = input_2 ** 2 % 7 bar = ((foo * input_1) ** (3/2) - 5) % 2 outcome = \u0026#34;\u0026#34; if bar == 0: outcome = \u0026#34;even\u0026#34; else: outcome = \u0026#34;odd\u0026#34; print(\u0026#34;Sorry\u0026#34;, input_3 + \u0026#34;,\u0026#34;, \u0026#34;but the calculation is\u0026#34;, outcome) Spacing\r#\r\rAlways include a space around any operator. The one exception is keyword arguments (commented below) which occasionally include no spaces. I\u0026rsquo;d advise to still put one to be safe.\nif a == \u0026#34;some expression\u0026#34; or b == \u0026#34;an other expression\u0026#34;: print(a == b) elif a in str_list: print(b not in str_list) print(a is c) elif a \u0026lt;= b: print(a != c) sum = a + b sum -= c # The sep argument here is a keyword argument print(a, \u0026#34;-\u0026#34;, b, \u0026#34;-\u0026#34;, c, sep = \u0026#34;\u0026#34;) # This also can work but to be safe do the line above. Ask your TA. print(a, \u0026#34;-\u0026#34;, b, \u0026#34;-\u0026#34;, c, sep=\u0026#34;\u0026#34;) Cursed Variable Characters\r#\r\rDon\u0026rsquo;t use \u0026lsquo;l\u0026rsquo; (in \u0026ldquo;lime\u0026rdquo;), \u0026lsquo;O\u0026rsquo; (in \u0026ldquo;Ostrich\u0026rdquo;), or \u0026lsquo;I\u0026rsquo; (in \u0026ldquo;Italian pizza sucks\u0026rdquo;) as single character variable names.\n# The nice syntax highlighting kinda ruins the fun but you\u0026#39;ll get the jist  # ... Am I adding 1, var l, or var I? Clarity will vary by text font some_var += l some_var += I # Other potential problems on why l is cursed: l = 1 | i | I l += 1 / l I += 1 / l * I | i # Why O is cursed some_var += O * 5 O = 0 + big_o(0) + o Variable Names\r#\r\rPython recommends snake_case (unofficial) as opposed to camelCase (official). Don\u0026rsquo;t ask me why snake_case doesn\u0026rsquo;t have any actual official name ¬Ø\\_(„ÉÑ)_/¬Ø\nweek = \u0026#34;This is a short but easily understood variable\u0026#34; comment_str = \u0026#34;It\u0026#39;s good to have meaning in your variables though\u0026#34; descriptive_comment_str = \u0026#34;This is for sure on the edge of length though\u0026#34; good_descriptive_comment_str = \u0026#34;This is way too far\u0026#34; a_name_like_this = \u0026#34;This is also weird from the amount of words\u0026#34; # Don\u0026#39;t do camelCase likeThis = \u0026#34;Avoid! This is cursedCase for this class.\u0026#34; Main Method\r#\r\rWe will ALWAYS have a main function in our programs. It isn\u0026rsquo;t required for your program to run, but it\u0026rsquo;s beneifical for structure and for checking if a progam is being run by itself or if it\u0026rsquo;s imported from another module.\nprint(\u0026#34;This code will run.\u0026#34;) print(\u0026#34;However, you\u0026#39;re going to get a point off.\u0026#34;) print(\u0026#34;So don\u0026#39;t do it in the first place.) def main(): print(\u0026#34;This code will also run.\u0026#34;) print(\u0026#34;It gives some better structure to your program.\u0026#34;) print(\u0026#34;This will be especially relevant when we have multiple functions.\u0026#34;) main() Expressions\r#\r\rParanthesis\r#\r\r# Good: test_expr_1 = ((5 + 4) / 2 + 1) * 9 // 3 % 4 # Paranthesis can still be good if they don\u0026#39;t change the order # of operations if they help describe what you\u0026#39;re doing: # test_expr_3 is better than test_expr_2 here since it\u0026#39;s clearer # to see we\u0026#39;re converting from hours -\u0026gt; days -\u0026gt; years with ()s test_expr_2 = hours / HOURS_IN_DAY / DAYS_IN_YEAR test_expr_3 = (hours / HOURS_IN_DAY) / DAYS_IN_YEAR # Bad: # Paranthesis here don\u0026#39;t add much, so they aren\u0026#39;t needed. # Also may look like a tuple instead to some programmers test_expr_4 = (5 + days // weeks) Multi-line expression\r#\r\r# Good: long_expression = (days_in_year * ARBITRARY_CONSTANT + months * score + years * OTHER_CONSTANT) long_expression = days_in_year * ARBITRARY_CONSTANT + months * score \\ + years * OTHER_CONSTANT # Okay: # Looks kinda goofy to me when you can fit more expressions on a line long_expression = (days_in_year * ARBITRARY_CONSTANT + months * score + years * OTHER_CONSTANT) # Bad: # Doesn\u0026#39;t compile long_expression = days_in_year * ARBITRARY_CONSTANT + months * score + years * OTHER_CONSTANT # Looks kinda bad with the expression to the left of the assignment) long_expression = (days_in_year * ARBITRARY_CONSTANT + months * score + years * OTHER_CONSTANT) # VERY BAD: # This won\u0026#39;t have a compile error but the last term won\u0026#39;t be # included in the expression. SCARY! long_expression = days_in_year * ARBITRARY_CONSTANT + months * score + years * OTHER_CONSTANT Conditionals\r#\r\rBoolean Zen\r#\r\r# Good: if var_1: print(\u0026#34;Ah. How zenful.\u0026#34;) if not var_2: print(\u0026#34;Still zenful.\u0026#34;) # Bad: if var_1 == True: print(\u0026#34;MY EYES\u0026#34;) if var_2 == False: print(\u0026#34;EVERYTHING BURNS\u0026#34;) Paranthesis\r#\r\r# Good: if (day == \u0026#34;Friday\u0026#34; or day == \u0026#34;Sunday\u0026#34;) and location == \u0026#34;West Campus\u0026#34; \\ and homework is None and hour \u0026gt; 18: location = \u0026#34;6th Street\u0026#34; bac = .10 if (not (day == Saturday or day == Sunday) and cs_class == \u0026#34;439\u0026#34; and (hour \u0026gt;= 0 and hour \u0026lt;= 24)): homework = float(\u0026#34;inf\u0026#34;) sanity = -float(\u0026#34;inf\u0026#34;) sleep = 0 error = \u0026#34;Segmentation fault\u0026#34; # Bad: if (day == \u0026#34;January\u0026#34; or day == \u0026#34;February\u0026#34;): print(\u0026#34;what\u0026#34;) if (day == \u0026#34;March\u0026#34;) or (day == \u0026#34;April\u0026#34;): print(\u0026#34;still what\u0026#34;) if ( day == \u0026#34;May\u0026#34; or day == \u0026#34;June\u0026#34; ): print(\u0026#34;still still what\u0026#34;) if/elif/else Spacing\r#\r\r# Good: # Describing the first if statement condition if condition_1: ... # Describing the second if statement condition elif condition_2: ... # Describing the last if statement condition else ... # Bad: # Describing the first if statement condition if condition_1: ... # Describing the second if statement condition elif condition_2: ... # Describing the last if statement condition else ... Functions\r#\r\rCalling\r#\r\r# Good: print(str(32) + \u0026#34;,\u0026#34;) # Bad: print (str (32) + \u0026#34;,\u0026#34;) Defining\r#\r\r# Good: def other_func(): ... def some_function(argument_1, argument_2): ... # Bad: def other_func( ): ... def some_function (arg_1,arg_2) : ... Comments\r#\r\r# Both acceptable: # Given otherName, which is another name like this class\u0026#39;s name, # decides which of the names is first according to tie breaker # rules and returns the first name def breakTieBreaker(otherName): ... # Break the tie breaker for the name in this class and otherName # pre: otherName != null # post: return the String that is seen as \u0026#34;best\u0026#34; by tiebreaker rules def breakTieBreaker(otherName): ... Classes\r#\r\rDeclaration\r#\r\r# This class creates an instance of NameLikeThis, that acts # as a sheep you\u0026#39;d find on a farm class FarmSheep: # The sheep by default has just been born with short fur def __init__(self, age = 0, fur_length = .1, noise = \u0026#34;ba\u0026#34;): self.age = age self.growth_factor = 38.2 / age^2 self.fur_length = fur_length self.noise = noise # Makes the sheep let out its cry whenever scared def noise(self): print(self.noise) # Grows the fur of the sheep based off the amount of nutrition # Do sheep grow hay? def grow_fur(self, hay): # The growth of fur is based off age and hay growth_num = hay * self.growth_factor self.fur_length += growth_num # Nature ... waste = hay * .65 return waste "},{"id":11,"href":"/~ves314/docs/ta/cs303e/exercises/ch3/","title":"Chapter 3","section":"Exercises","content":"Chapter 3 Exercise Solutions\r#\r\rDownload Solutions\nEmbedded solutions:\n# Exercises for Chapter 3 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) import math import time # 3.2 length = eval(input(\u0026#34;Enter the length from the center to a vertex: \u0026#34;)) side = 2 * length * math.sin(math.pi / 5) area = (3 * math.sqrt(3)/2) * side**2 print(\u0026#34;The area of the pentagon is\u0026#34;, round(area, 2)) # 3.3 # Using google instead atlanta_x, atlanta_y = math.radians(33.7490), math.radians(84.3880) orlando_x, orlando_y = math.radians(28.5383), math.radians(81.3792) savannah_x, savannah_y = math.radians(32.0809), math.radians(81.0912) charlotte_x, charlotte_y = math.radians(35.2271), math.radians(80.8431) # Earth\u0026#39;s radius is 6,371.01km radius = 6371.01 # Get mapped distances dist_atl_char = (radius * math.acos(math.sin(atlanta_x) * math.sin(charlotte_x) + math.cos(atlanta_x) * math.cos(charlotte_x) * math.cos(atlanta_y - charlotte_y))) dist_char_sav = (radius * math.acos(math.sin(charlotte_x) * math.sin(savannah_x) + math.cos(charlotte_x) * math.cos(savannah_x) * math.cos(charlotte_y - savannah_y))) dist_sav_atl = (radius * math.acos(math.sin(savannah_x) * math.sin(atlanta_x) + math.cos(savannah_x) * math.cos(atlanta_x) * math.cos(savannah_y - atlanta_y))) dist_sav_orl = (radius * math.acos(math.sin(savannah_x) * math.sin(orlando_x) + math.cos(savannah_x) * math.cos(orlando_x) * math.cos(savannah_y - orlando_y))) dist_orl_atl = (radius * math.acos(math.sin(orlando_x) * math.sin(atlanta_x) + math.cos(orlando_x) * math.cos(atlanta_x) * math.cos(orlando_y - atlanta_y))) print(dist_atl_char, dist_char_sav, dist_orl_atl, dist_sav_atl, dist_sav_orl) # Split the area into two triangles # Triangle 1: s_1 = (dist_atl_char + dist_char_sav + dist_sav_atl)/2 area_1 = math.sqrt(s_1 * (s_1 - dist_atl_char) * (s_1 - dist_char_sav) * (s_1 - dist_sav_atl)) # Triangle 2: s_2 = (dist_sav_orl + dist_orl_atl + dist_sav_atl)/2 area_2 = math.sqrt(s_2 * (s_2 - dist_sav_orl) * (s_2 - dist_orl_atl) * (s_2 - dist_sav_atl)) final_area = area_1 + area_2 print(\u0026#34;The area encompassed by the four cities is\u0026#34;, round(final_area, 2), \u0026#34;square km!\u0026#34;) # 3.6 input_code = eval(input(\u0026#34;Enter an ASCII code: \u0026#34;)) display_chr = chr(input_code) print(\u0026#34;The character is\u0026#34;, display_chr) # 3.7 # Have only 26 possible numbers random_code = int(time.time() % 26) # Make the starting number A (65 + 0 = A :)) display_chr = chr(65 + random_code) print(\u0026#34;The random character is\u0026#34;, display_chr) # 3.10 print(\u0026#34;\\u03b1\\u03b2\\u03b3\\u03b4\\u03b5\\u03b6\\u03b7\\u03b8\u0026#34;) "},{"id":12,"href":"/~ves314/docs/ta/cs314/review/","title":"Exam Reviews","section":"CS 314","content":"Exam Reviews for CS 314\r#\r\rThese reviews are designed to fill in the gaps in your knowledge or sharpen your skills before the exam.\nNOTE: The questions on the exam may not look like some of the questions listed. These are not prepared to model the exam questions, but rather, is made to cover the material we\u0026rsquo;ve learned in class =)\nBest of luck!\n\u0026mdash;\u0026gt; HOW TO STUDY! \u0026lt;\u0026mdash;\n   Exam Date Review     Exam 1 I\u0026rsquo;m lazy I\u0026rsquo;m lazy   Exam 2 I\u0026rsquo;m lazy I\u0026rsquo;m lazy   Exam 3 I\u0026rsquo;m lazy I\u0026rsquo;m lazy    "},{"id":13,"href":"/~ves314/docs/ta/cs303e/exercises/","title":"Exercises","section":"CS 303E","content":"Solved Excersises for CS 303E\r#\r\rThis directory contains solutions for the suggested exercises Mike has put up on the class schedule page.\nThe solutions should be posted here early in the week for the following week of assignments. Make sure to come back here for solutions if they aren\u0026rsquo;t up yet!\nIf you think I made an error in a solution make sure to contact me here.\n   Week Exercises Covered     1 1.2 - 1.11   2 2.1 - 2.22 \u0026mdash; 3.2 - 3.10   3 4.1 - 4.22 \u0026mdash; 5.1 - 5.14   4 5.18 - 5.45 \u0026mdash; 6.1 - 6.8   5 6.13 - 6.28 \u0026mdash; 7.1 - 7.8   6 8.1 - 8.15 \u0026mdash; 10.2 - 10.27   7 11.1 - 11.22 \u0026mdash; 13.1 - 13.3   8 14.2 - 14.11 \u0026mdash; 15.1 - 15.2    "},{"id":14,"href":"/~ves314/docs/ta/cs314/review/guide/","title":"Studying Guide","section":"Exam Reviews","content":"How to Prepare For Exams\r#\r\rThe exams are by far the biggest portion of this class. They will be what determines your letter grade.\nFeeling a bit anxious the closer you get to the exam? Good! That means you understand the significane of these exams in the class. If this feeling makes you study harder for the exam that\u0026rsquo;s great. However, if this feeling prevents you from wanting to study out of fear then please reach out to me ASAP. I completely understand the feeling, and I\u0026rsquo;ll be happy to talk with you about it.\nThe earlier you start preparing for each exam the better, but it\u0026rsquo;s never too late to practice (unless it\u0026rsquo;s costing you sleep the night before the exam \u0026ndash; sleep will help you far more than any one question can).\nIn my opinion, you can never prepare enough for the exams. For example, let\u0026rsquo;s say the final is out of 100 points. If you miss 3 points, this is equivelant to missing 9 points on your assignments. Additionally, you get 0 slack points on your final, so if you miss something on any exam it will impact your final grade unlike assignments.\nThis means if you assume you don\u0026rsquo;t miss any points from assignments (due to slack points), you\u0026rsquo;ll need a weighted average of at least exactly 90 on what will be likely by far the most difficult exams you\u0026rsquo;ll take this semester in order to get an A in the class. There are no exceptions to this grading policy.\nIf you\u0026rsquo;re an on target student like I was, you may feel after completing a practice exam, exam 1, or exam 2, reaching this average may feel difficult or borderline impossible. I promise you with enough smart studying and (above all else) hard work you can give yourself a good shot at reaching your goal. It\u0026rsquo;s all up to you!\nWhen to Start Preparing\r#\r\rMike recommends to begin reviewing 2 weeks before the exam date. This is the nice medium between learning enough material to understand most of the exam while still giving yourself plenty of time to review. 2 weeks may sound way too far in advanced, but I can assure you from personal experience starting to study a week or less before the exam can you give this sickening feeling of wishing you started earlier. You\u0026rsquo;ll likely start studying more the closer you get to the exam, but please do start looking at the exam ASAP.\nHint: If you\u0026rsquo;re reading this the day it was posted (9/23) two weeks before the exam is TODAY!\nIf you feel too busy to study but deeply care about your grade in the class please consider temporarily dropping other arrangements you can afford to drop. This is an extremely valuable skill that will serve you very well in CS 439 (Operating Systems). You don\u0026rsquo;t find time, you make time by not doing other things. If you have the time, try watching this time management lecture from Randy Pausch (you may have heard Mike reference him in the past!):\n  How Much to Prepare\r#\r\rAs stated above, I don\u0026rsquo;t believe you can over prepare for these exams. These exams almost exclusively test soft skills, so you can\u0026rsquo;t memorize all the information you\u0026rsquo;ll need for the exam. You can only improve these fundamental data structure skills required for the exam by continually identifying mistakes in your thought processes. Mike may not agree with me, but as an on target student, I wish I completed all the past CS 314 exams on Mike\u0026rsquo;s website. Here\u0026rsquo;s how many I did for each exam, and how satisfied I was with my exam grade:\n   Exam Practice Exams Completed Result     Exam 1 7 :)   Exam 2 6 :'( (Ask Andrew)   Exam 3 14 :DD    (For exam 3 I did some CS 307 exams)\nSo, I\u0026rsquo;d recommend to give yourself a good chance of meeting your goal that you should attempt to complete all the exams if you have the time. This sounds impractical, but I think I would have saved myself a lot of stress in this class if I did this. Mike will give his (far more experienced) opinion if you ask.\nHow much time will this take? For the final I spent around 2-3 full days studying. It\u0026rsquo;s honestly a lot more fun in the GDC with occasionally helping friends and coughing up free soda on the chair used for help hours (ask Andrew), so I empathise with y\u0026rsquo;all having to study for the class remotely. It\u0026rsquo;s honestly not as fun.\nHow to Prepare\r#\r\rPiazza\r#\r\rPiazza is a very underrated tool for preparing for the exam.\nIf you\u0026rsquo;re confused on an exam answer please ask on Piazza. It\u0026rsquo;s the best resource to get fast answers to these questions.\nIf you\u0026rsquo;re practicing for your exams please answer exam questions on Piazza. This is an amazing way to force yourself to rubber ducky problems constantly. It helps you straighten up your own skills as you help others. I no-lifed Piazza during Finals week and I truly believe it\u0026rsquo;s the reason I got an A.\nOrder to Use Practice Exams\r#\r\rBefore you do anything else, reserve the most recent 2/3 exams (Fall 18, 19 and Spring 19) for dry runs. Do not look at these exams for right now. More on that later.\nI\u0026rsquo;d recommend starting on the farthest back exam so that when you finish practicing you\u0026rsquo;ll finish the last exam before the first dry run exam. For example, if you see yourself using 4 practice exams before the dry runs, I\u0026rsquo;d say start at Fall 2016, then work Spring 2018, Fall 2017, and then Spring 2018. Then, do the dry run for Fall 2018, Spring 2019, and then Fall 2019. As another example, if you aim to do all the practice exams I\u0026rsquo;d say start with Fall 2011 and work all the way until Spring 2018.\nWhy?\nIn my opinion, the exams have gotten progressively more difficult as time has continued. I\u0026rsquo;d say it\u0026rsquo;s better to patch the easier mistakes you\u0026rsquo;ll make early on so you can better isolate the harder mistakes on more recent exams. Additionally, you\u0026rsquo;ll get better as you keep practicing, so if you start from recent and go backwards the practice will help less and less over time versus starting far back and progressing to more recent exams.\nHow to Use Practice Exams\r#\r\rI\u0026rsquo;d say first do a question and then look at the answer. No timing involved. The one exception to this may be all the short answer questions at the start of the exam and do them all together. The reason for this exception is all the answers are next to each other so if you want to check the answer to 1A you may spoil yourself on the answer to 1B which will lower the quality of your studying.\nAs for materials, I\u0026rsquo;d say writing your answers in any notebook/loose-leaf paper will work. Mike has recommended printing out the exams in the past, but I didn\u0026rsquo;t since the GDC\u0026rsquo;s printers are slower than my implementation of my heap in OS and I didn\u0026rsquo;t find using a notebook took away anything from studying.\nThis is the order you should take for a single question:\n Complete the question to the best of your ability.  DO NOT half-ass it and then check the answer. You will regret this later when you either run out of practice or, even worse, when you\u0026rsquo;re taking the exam and see a similar question that you now can\u0026rsquo;t remember that one detail to.   Check the answer. Be VERY nit-picky  Make 100% sure on coding questions you got it completely right. If you\u0026rsquo;re not sure please make a public post on Piazza with your submission or ask a friend. NEVER skim the answer key and assume your solution is valid because they look similar in structure. You will regret it.   If you were incorrect with your attempt, understand why you missed it.  This is the most important step in studying. You need to force yourself to understand your mistake well enough to feel 99% confident you\u0026rsquo;ll never miss a question over the same detail on the exam.  This will mean going over lecture slides (briefly \u0026ndash; please don\u0026rsquo;t try to read over all the slides. It won\u0026rsquo;t help) and asking on Piazza. This will sometimes require spending 20 to 30 minutes trying to feel comfortable with what you\u0026rsquo;re missing. I promise you it\u0026rsquo;s worth it. One thing I wish I tried was writing down in a journal what the underlying issue is that led to that mistake.  USELESS: \u0026ldquo;I used .next instead of .next.next silly me\u0026rdquo; USEFUL: \u0026ldquo;In order to change the next pointer of a singly-linked list, I need to check two nodes in front of me\u0026rdquo;        That\u0026rsquo;s really it for practice. Rinse and repeat for as many exams you can squeeze in.\nDry Runs\r#\r\rThese are the sanity checks to let you ballpark how well you\u0026rsquo;ll do on the actual exam. The idea with a dry run is you treat it like a real exam. That involves the following:\n Giving yourself exactly 2 hours (time for the real exam) to complete the dry run Not letting yourself check answers in between questions. Complete the entire thing and then check the answer key. No distractions. No music, friends, etc.  I think food is okay when you\u0026rsquo;re thinking of how to solve a coding question but if you want to be strict don\u0026rsquo;t let yourself eat/drink either.    You can let yourself finish early (unlike the actual exam \u0026ndash; please use the entire time to review your answers. Ask for Mike\u0026rsquo;s story with Jacob(?) turning in his test early with the Connect Four recursive backtracking problem), but otherwise treat it as close to the actual exam as possible.\nThese will really estimate how we\u0026rsquo;ll you\u0026rsquo;re doing along with giving you the most impactful practice you\u0026rsquo;ll get per question, as you\u0026rsquo;ll find these most recent exams have the hardest questions. You\u0026rsquo;ll learn a lot by doing them.\nIf you\u0026rsquo;re still not doing as well as you want, it\u0026rsquo;s not the end of the world. I find, even with dry runs, I do better on the real deal versus dry runs since you can\u0026rsquo;t replicate that feeling of urgency in practice you get on the exam. Wonder if there\u0026rsquo;s a term for this.\nWhat Not to Do\r#\r\r Don\u0026rsquo;t let your review be reading over the slides. It won\u0026rsquo;t work. Don\u0026rsquo;t spend your time memorizing Big O expressions. You should focus on the soft skill of analyzing an algorithm for its Big O rather than trying to cram them all in your head:  USELESS: Quizlet for memorizing ArrayList\u0026rsquo;s Big Os USEFUL: Looking at GenericList to understand why remove is \\(O(N^2)\\)   Looking at a question, looking at the answer, and then reasoning why the question\u0026rsquo;s answer is that.  You aren\u0026rsquo;t going to remember anything from this. You need to attempt the question first to get the solution to stick in your brain and improve your soft skills    \r\r\\(\r\\)\r\r"},{"id":15,"href":"/~ves314/docs/ta/cs303e/exercises/ch4/","title":"Chapter 4","section":"Exercises","content":"Chapter 4 Exercise Solutions\r#\r\rDownload Solutions\nEmbedded solutions:\n# Exercies for Chapter 4 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) import math import random # 4.1 a, b, c = eval(input(\u0026#34;Enter, a, b, c: \u0026#34;)) discrim = b ** 2 - (4 * a * c) if discrim \u0026lt; 0: print(\u0026#34;The equation has no real roots\u0026#34;) else: root_1 = (-b + math.sqrt(discrim)) / (2 * a) if discrim == 0: print(\u0026#34;The root is\u0026#34;, root_1) else: root_2 = (-b - math.sqrt(discrim)) / (2 * a) print(\u0026#34;The roots are\u0026#34;, root_1, \u0026#34;and\u0026#34;, root_2) # 4.2 num_1 = random.randint(0, 9) num_2 = random.randint(0, 9) num_3 = random.randint(0, 9) add_string = str(num_1) + \u0026#34; + \u0026#34; + str(num_2) + \u0026#34; + \u0026#34; + str(num_3) answer = eval(input(\u0026#34;What is \u0026#34; + add_string + \u0026#34;? \u0026#34;)) print(add_string, \u0026#34;=\u0026#34;, answer, \u0026#34;is\u0026#34;, answer == num_1 + num_2 + num_3) # 4.4 num_1 = random.randint(0, 99) num_2 = random.randint(0, 99) add_string = str(num_1) + \u0026#34; + \u0026#34; + str(num_2) answer = eval(input(\u0026#34;What is \u0026#34; + add_string + \u0026#34;? \u0026#34;)) print(add_string, \u0026#34;=\u0026#34;, answer, \u0026#34;is\u0026#34;, answer == num_1 + num_2) # 4.6 weight = eval(input(\u0026#34;Enter weight in pounds: \u0026#34;)) feet = eval(input(\u0026#34;Enter feet: \u0026#34;)) inches = eval(input(\u0026#34;Enter inches: \u0026#34;)) inches += feet * 12 KILOGRAMS_PER_POUND = .45359237 METERS_PER_INCH = .0254 weight_in_kilograms = weight * KILOGRAMS_PER_POUND height_in_meters = inches * METERS_PER_INCH bmi = weight_in_kilograms / (height_in_meters ** 2) print(\u0026#34;BMI is\u0026#34;, bmi) if bmi \u0026lt; 18.5: print(\u0026#34;You are Underweight\u0026#34;) elif bmi \u0026lt; 25: print(\u0026#34;You are Normal\u0026#34;) elif bmi \u0026lt; 30: print(\u0026#34;You are Overweight\u0026#34;) else: print(\u0026#34;You are Obese\u0026#34;) # 4.8 num_1, num_2, num_3 = eval(input(\u0026#34;Enter 3 numberss (a, b, c): \u0026#34;)) if num_1 \u0026gt; num_2: num_1, num_2 = num_2, num_1 if num_2 \u0026gt; num_3: num_2, num_3 = num_3, num_2 if num_1 \u0026gt; num_3: num_1, num_3 = num_3, num_1 if num_1 \u0026gt; num_2: num_1, num_2 = num_2, num_1 print(\u0026#34;Numbers ordered:\u0026#34;, num_1, num_2, num_3) # 4.10 num_1 = random.randint(0, 99) num_2 = random.randint(0, 99) mult_string = str(num_1) + \u0026#34; * \u0026#34; + str(num_2) real_answer = num_1 * num_2 answer = eval(input(\u0026#34;What is \u0026#34; + mult_string + \u0026#34;? \u0026#34;)) if real_answer == answer: print(\u0026#34;You are correct!\u0026#34;) else: print(\u0026#34;Your answer is wrong.\\n\u0026#34;, mult_string, \u0026#34;is\u0026#34;, real_answer) # 4.11 # Omitted due to similarity with assignment 4/5 # 4.14 flip = random.randint(0, 1) guess = input(\u0026#34;Guess heads or tails: \u0026#34;) guess_num = 0 if guess == \u0026#34;heads\u0026#34; else 1 if flip == guess_num: print(\u0026#34;Correct!\u0026#34;) else: print(\u0026#34;Wrong guess.\u0026#34;) # 4.17 user_move = eval(input(\u0026#34;scissor (0), rock (1), paper (2): \u0026#34;)) computer_move = random.randint(0, 2) user_display = \u0026#34;scissor\u0026#34; if user_move == 1: user_display = \u0026#34;rock\u0026#34; elif user_move == 2: user_display = \u0026#34;paper\u0026#34; computer_display = \u0026#34;scissor\u0026#34; if computer_move == 1: user_display = \u0026#34;rock\u0026#34; elif computer_move == 2: user_display = \u0026#34;paper\u0026#34; outcome = user_move - computer_move if outcome == 0: print(\u0026#34;The computer is \u0026#34; + str(computer_display) + \u0026#34;. You are \u0026#34; + str(user_display) + \u0026#34; too. It is a draw.\u0026#34;) else: result = \u0026#34;You won.\u0026#34; if outcome == 1 else \u0026#34;You lost.\u0026#34; print(\u0026#34;The computer is \u0026#34; + str(computer_display) + \u0026#34;. You are \u0026#34; + str(user_display) + \u0026#34;. \u0026#34; + result) # 4.22 x, y = eval(input(\u0026#34;Enter a point with two coordinates: \u0026#34;)) dist = math.sqrt(x ** 2 + y ** 2) result = \u0026#34;is\u0026#34; if dist \u0026gt; 10: result += \u0026#34; not\u0026#34; print(\u0026#34;Point (\u0026#34; + str(x) + \u0026#34;, \u0026#34; + str(y) + \u0026#34;) \u0026#34; + result + \u0026#34; in the circle\u0026#34;) "},{"id":16,"href":"/~ves314/docs/ta/cs303e/review/","title":"Exam Reviews","section":"CS 303E","content":"Exam Reviews for CS 303E\r#\r\rThese reviews are designed to fill in the gaps in your knowledge or sharpen your skills before the exam.\nNOTE: The questions on the exam may not look like some of the questions listed. These are not prepared to model the exam questions, but rather, is made to cover the material we\u0026rsquo;ve learned in class =)\nBest of luck!\n   Exam Date Review     Midterm 7/7 Page   Final 7/30 Page    "},{"id":17,"href":"/~ves314/docs/ta/cs303e/exercises/ch5/","title":"Chapter 5","section":"Exercises","content":"Chapter 5 Exercise Solutions\r#\r\rDownload Solutions\nEmbedded solutions:\n# Exercises for Chapter 5 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) import math # 5.1 input_prompt = \u0026#34;Enter an integer, the input ends if it is 0: \u0026#34; keep_running = eval(input(input_prompt)) != 0 while keep_running: keep_running = eval(input(input_prompt)) != 0 # 5.3 print(\u0026#34;Kilograms Pounds\u0026#34;) for kilos in range(1, 200): pounds = kilos * 2.2 print(format(kilos, \u0026#34;\u0026lt;14\u0026#34;) + format(pounds, \u0026#34;5.1f\u0026#34;)) # 5.9 value = 10000 INTEREST = .05 for i in range(10): value *= (1 + INTEREST) print(\u0026#34;Tutition cost 10 years from now (ouch): $\u0026#34; + format(value, \u0026#34;.2f\u0026#34;)) four_year_cost = value for i in range(3): value *= (1 + INTEREST) four_year_cost += value print(\u0026#34;Tuition for 4 years starting 10 years from now (double ouch): $\u0026#34; + format(four_year_cost, \u0026#34;.2f\u0026#34;)) # 5.14 n = 0 while n ** 2 \u0026lt;= 12000: n += 1 print(n, \u0026#34;is the smallest number that is less than 12,000\u0026#34;) # 5.18 # Witheld due to similarity with assignment 11 # 5.19 max_num = eval(input(\u0026#34;Enter the number of lines: \u0026#34;)) # Make n layers for layer in range(1, max_num + 1): layer_str = \u0026#34;\u0026#34; # Get some spacing that gets smaller for each layer from the left # Each number and the spaces after is 3 wide so 3 * layer makes sense edge_spacing = 45 - (3 * layer) for i in range(edge_spacing): layer_str += \u0026#34; \u0026#34; # Add the first number (fence-post problem) layer_str += str(layer) # For every number less than the first \u0026gt; 0 add it to the pyramid tmp_num = layer - 1 while tmp_num \u0026gt; 0: # Adjust spacing based on if double-digit str_add = \u0026#34; \u0026#34; if tmp_num \u0026lt; 9 else \u0026#34; \u0026#34; layer_str += str_add + str(tmp_num) tmp_num -= 1 # Add the opposite way back up tmp_num = 2 while tmp_num \u0026lt;= layer: str_add = \u0026#34; \u0026#34; if tmp_num \u0026lt; 10 else \u0026#34; \u0026#34; layer_str += str_add + str(tmp_num) tmp_num += 1 print(layer_str) # 5.21 for layer in range(8): layer_str = \u0026#34;\u0026#34; # Each space and numbers before it take 4 spaces total edge_spacing = 60 - (4 * layer) for i in range(edge_spacing // 2): layer_str += \u0026#34; \u0026#34; # 1 is always first layer_str += \u0026#34;1\u0026#34; # Each power of 2 \u0026gt; 1 less than 2^layer for num in range(1, layer + 1): num_sq = 2 ** num # For each digit take away a space if num_sq \u0026lt; 10: sp_width = \u0026#34; \u0026#34; elif num_sq \u0026lt; 100: sp_width = \u0026#34; \u0026#34; else: sp_width = \u0026#34; \u0026#34; layer_str += sp_width + str(num_sq) num = layer - 1 # Count down powers of 2 to 1 while num \u0026gt;= 0: # For each digit take away a space num_sq = 2 ** num if num_sq \u0026lt; 10: sp_width = \u0026#34; \u0026#34; elif num_sq \u0026lt; 100: sp_width = \u0026#34; \u0026#34; else: sp_width = \u0026#34; \u0026#34; layer_str += sp_width + str(num_sq) num -= 1 print(layer_str) # 5.23 - A little off since the sample output doesn\u0026#39;t round loan = eval(input(\u0026#34;Loan Amount: \u0026#34;)) years = eval(input(\u0026#34;Number of Years: \u0026#34;)) print(format(\u0026#34;Interest Rate\u0026#34;, \u0026#34;\u0026lt;16\u0026#34;), format(\u0026#34;Monthly Payment\u0026#34;, \u0026#34;\u0026lt;16\u0026#34;), format(\u0026#34;Total Payment\u0026#34;, \u0026#34;\u0026lt;16\u0026#34;)) yearly_interest = .05 while yearly_interest \u0026lt; .08125: monthly_interest = yearly_interest / 12 monthly_payment = (loan * monthly_interest / (1 - 1 / (1 + monthly_interest) ** (years * 12))) total_payment = monthly_payment * years * 12 print(format(yearly_interest, \u0026#34;\u0026lt;16.3%\u0026#34;), format(monthly_payment, \u0026#34;\u0026lt;16.2f\u0026#34;), format(total_payment, \u0026#34;\u0026lt;16.2f\u0026#34;)) yearly_interest += .00125 # 5.24 loan = eval(input(\u0026#34;Loan Amount: \u0026#34;)) years = eval(input(\u0026#34;Number of Years: \u0026#34;)) ann_interest = eval(input(\u0026#34;Annual Interest Rate: \u0026#34;)) monthly_interest = ann_interest / 1200 monthly_payment = (loan * monthly_interest / (1 - 1 / (1 + monthly_interest) ** (years * 12))) total_payment = monthly_interest * years * 12 print(\u0026#34;\\nMonthly Payment:\u0026#34;, format(monthly_payment, \u0026#34;.2\u0026#34;)) print(\u0026#34;Total Payment:\u0026#34;, format(total_payment, \u0026#34;.2\u0026#34;)) print() print(format(\u0026#34;Payment #\u0026#34;, \u0026#34;\u0026lt;10\u0026#34;), format(\u0026#34;Interest\u0026#34;, \u0026#34;\u0026lt;10\u0026#34;), format(\u0026#34;Principal\u0026#34;, \u0026#34;\u0026lt;10\u0026#34;), format(\u0026#34;Balance\u0026#34;, \u0026#34;\u0026lt;10\u0026#34;)) for i in range(1, 12 * years + 1): interest = monthly_interest * loan principal = monthly_payment - interest loan -= principal print(format(i, \u0026#34;\u0026lt;10.0f\u0026#34;), format(interest, \u0026#34;\u0026lt;10.2f\u0026#34;), format(principal, \u0026#34;\u0026lt;10.2f\u0026#34;), format(loan, \u0026#34;10.2f\u0026#34;)) # 5.25 sum_left = 0 sum_right = 0 n = 50_000 for i in range(1, n + 1): sum_left += 1 / i sum_right += 1 / abs(n - (i - 1)) print(\u0026#34;Sum from left :\u0026#34;, sum_left) print(\u0026#34;Sum from right:\u0026#34;, sum_right) print(\u0026#34;Difference :\u0026#34;, abs(sum_left - sum_right)) # 5.28 item = 1 e = 1 for i in range(1, 1_000_000 + 1): item = item / i e += item # Added i \u0026lt; 20 since it\u0026#39;s the same if i % 10_000 == 0 or i \u0026lt; 20: print(\u0026#34;e for\u0026#34;, i, \u0026#34;iterations is:\u0026#34;, format(e, \u0026#34;.51\u0026#34;)) # 5.29 count = 0 curr_line = \u0026#34;\u0026#34; for year in range(2001, 2100 + 1): if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0: count += 1 curr_line += str(year) + \u0026#34; \u0026#34; if count == 10: print(curr_line) count = 0 curr_line = \u0026#34;\u0026#34; # 5.35 perfect_nums = \u0026#34;\u0026#34; for num in range(2, 10_000): div_sum = 1 for div_num in range(2, num): if num % div_num == 0: div_sum += div_num if num == div_sum: perfect_nums += str(num) + \u0026#34; \u0026#34; print(\u0026#34;Perfect Numbers:\u0026#34;, perfect_nums) # 5.45 num = eval(input(\u0026#34;Enter a decimal integer: \u0026#34;)) hex_num = \u0026#34;\u0026#34; while num \u0026gt; 0: div_digit = num % 16 num //= 16 if div_digit \u0026lt; 10: div_digit = str(div_digit) elif div_digit == 10: div_digit = \u0026#34;A\u0026#34; elif div_digit == 11: div_digit = \u0026#34;B\u0026#34; elif div_digit == 12: div_digit = \u0026#34;C\u0026#34; elif div_digit == 13: div_digit = \u0026#34;D\u0026#34; elif div_digit == 14: div_digit = \u0026#34;E\u0026#34; else: div_digit = \u0026#34;F\u0026#34; hex_num = div_digit + hex_num print(\u0026#34;Hexadecimal equivelant:\u0026#34;, hex_num) "},{"id":18,"href":"/~ves314/docs/ta/cs303e/assignment/","title":"A9 Tester","section":"CS 303E","content":"Test File for Assignment 9\r#\r\rHey! I\u0026rsquo;ve created a test file to help with your current assignment, since entering all of Mike\u0026rsquo;s inputs is quite tedious while troubleshooting. Additionally, I\u0026rsquo;ve created methods to generate random tests along with easily testing the other functions yourself with custom inputs!\nClick here to access the file\nSteps to Install\r#\r\r Access the file Right click on the file and select \u0026ldquo;Save as\u0026rdquo; or something similar Move this file into the same folder as your strings.py In strings.py, at the bottom of the program change it so it looks like:  if __name__ == \u0026#34;__main__\u0026#34;: main() Make sure to remove this when you\u0026rsquo;re about to submit your program\n5. Run the strings_tester.py file!\nMike\u0026rsquo;s Outputs\r#\r\rExample 1\r#\r\r----- EXAMPLE 1 -----\r--------------------\rFunction name: num_chars_same\rParameter 1: catch\rParameter 2: cots\rReturn value: 2\r--------------------\r--------------------\rFunction name: num_chars_same\rParameter 1: catch\rParameter 2: cat chaser\rReturn value: 3\r--------------------\r--------------------\rFunction name: stretch\rParameter 1: dog\rParameter 2: 3\rReturn value: dddooooooggggggggg\r--------------------\r--------------------\rFunction name: stretch\rParameter 1: dog\rParameter 2: 1\rReturn value: dooggg\r--------------------\r--------------------\rFunction name: length_of_matching_suffix\rParameter 1: cat\rParameter 2: doggo\rReturn value: 0\r--------------------\r--------------------\rFunction name: length_of_matching_suffix\rParameter 1: dog\rParameter 2: doggo\rReturn value: 0\r--------------------\rExample 2\r#\r\r----- EXAMPLE 2 ----- --------------------\rFunction name: num_chars_same\rParameter 1: catch\rParameter 2: batches\rReturn value: 4\r--------------------\r--------------------\rFunction name: stretch\rParameter 1: dog\rParameter 2: 0\rReturn value:\r--------------------\r--------------------\rFunction name: length_of_matching_suffix\rParameter 1: cats\rParameter 2: dogs\rReturn value: 1\r--------------------\rExample 3\r#\r\r----- EXAMPLE 3 -----\r--------------------\rFunction name: num_chars_same\rParameter 1: dog\rParameter 2: cats\rReturn value: 0\r--------------------\r--------------------\rFunction name: num_chars_same\rParameter 1:\rParameter 2: cats\rReturn value: 0\r--------------------\r--------------------\rFunction name: num_chars_same\rParameter 1: Hamilton\rParameter 2: ham stands!\rReturn value: 4\r--------------------\r--------------------\rFunction name: stretch\rParameter 1: Dogs!\rParameter 2: 4\rReturn value: DDDDooooooooggggggggggggssssssssssssssss!!!!!!!!!!!!!!!!!!!!\r--------------------\r--------------------\rFunction name: stretch\rParameter 1: 1234\rParameter 2: 2\rReturn value: 11222233333344444444\r--------------------\r--------------------\rFunction name: stretch\rParameter 1: !!!\rParameter 2: 1\rReturn value: !!!!!!\r--------------------\r--------------------\rFunction name: length_of_matching_suffix\rParameter 1: cats\rParameter 2:\rReturn value: 0\r--------------------\r--------------------\rFunction name: length_of_matching_suffix\rParameter 1: cats\rParameter 2: maniacs\rReturn value: 1\r--------------------\r--------------------\rFunction name: length_of_matching_suffix\rParameter 1: dog\rParameter 2: cat and dog\rReturn value: 3\r--------------------\rRandom Output Sample\r#\r\rEnter one of the following\r- m to Mike's same example\r- r to run random tests\r- s to select a certain method\rYour choice: r\rEnter the number of random tests: 5\rEnter a # for the seed for the test: 27600\r--------------------\rFunction name: num_chars_same\rParameter 1: rZQ\rParameter 2: bfQ\rReturn value: 1\r--------------------\r--------------------\rFunction name: num_chars_same\rParameter 1: dfE\rParameter 2: DZE\rReturn value: 1\r--------------------\r--------------------\rFunction name: stretch\rParameter 1: siXxTBaRzvOlq\rParameter 2: 5\rReturn value: sssssiiiiiiiiiiXXXXXXXXXXXXXXXxxxxxxxxxxxxxxxxxxxxTTTTTTTTTTTTTTTTTTTTTTTTTBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\r--------------------\r--------------------\rFunction name: length_of_matching_suffix\rParameter 1: hXiKWdNLfeTjpc\rParameter 2: vAjICLSmAlemtDWIUANCxyjPASUupXTdhrLfeTjpc\rReturn value: 7\r--------------------\r--------------------\rFunction name: num_chars_same\rParameter 1: eNuCnEMgYRRso\rParameter 2: vrBzLyYgRQCii\rReturn value: 1\r--------------------\rTests done. Enter y to do more tests: n\rCustom Input Sample\r#\r\rEnter one of the following\r- m to Mike's same example\r- r to run random tests\r- s to select a certain method\rYour choice: s\rEnter the number of select tests: 3\rEnter a function choice number:\r- 0 for num_chars_same\r- 1 for stretch\r- 2 for length_of_matching_suffix\rEnter your function number choice: 0\r--------------------\rTrial #: 1\rFunction name: num_chars_same\rFirst parameter: sample string\rSecond parameter: sample word\rReturn value: 8\r--------------------\rEnter a function choice number:\r- 0 for num_chars_same\r- 1 for stretch\r- 2 for length_of_matching_suffix\rEnter your function number choice: 1\r--------------------\rTrial #: 2\rFunction name: stretch\rFirst parameter: beanin'\rSecond parameter: 7\rReturn value: bbbbbbbeeeeeeeeeeeeeeaaaaaaaaaaaaaaaaaaaaannnnnnnnnnnnnnnnnnnnnnnnnnnniiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiinnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn'''''''''''''''''''''''''''''''''''''''''''''''''\r--------------------\rEnter a function choice number:\r- 0 for num_chars_same\r- 1 for stretch\r- 2 for length_of_matching_suffix\rEnter your function number choice: 2\r--------------------\rTrial #: 3\rFunction name: length_of_matching_suffix\rFirst parameter: eeeeeeEEEEEEE\rSecond parameter: REEEEEEEEEEE\rReturn value: 7\r--------------------\rTests done. Enter y to do more tests: n\rHere\u0026rsquo;s Colette\u0026rsquo;s dog Hunter:\n"},{"id":19,"href":"/~ves314/docs/ta/cs303e/exercises/ch6/","title":"Chapter 6","section":"Exercises","content":"Chapter 6 Exercise Solutions\r#\r\rDownload Solutions\nEmbedded solutions:\n# Exercises for Chapter 6 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) import random # 6.1 # CS 311 exercise =) - Prove that for any n the pentagonal number # is an integer def getPentagonalNumber(n): return n * (3 * n - 1) // 2 for i in range(10): line_str = str(getPentagonalNumber(i * 10 + 1)) for j in range(2, 11): line_str += \u0026#34;, \u0026#34; + str(getPentagonalNumber(i * 10 + j)) print(line_str) # 6.2 def sumDigits(n): sum = 0 while n \u0026gt; 0: sum += n % 10 n //= 10 return sum sum = sumDigits(eval(input(\u0026#34;Enter a number: \u0026#34;))) print(\u0026#34;The sum of the digits is\u0026#34;, sum) # 6.8 def celsiusToFahrenheit(celsius): return (9 / 5) * celsius + 32 def fahrenheitToCelsius(fahrenheit): return (5 / 9) * (fahrenheit - 32) c_temp = 40.0 f_temp = 120.0 print(format(\u0026#34;Celsius\u0026#34;, \u0026#34;\u0026lt;15\u0026#34;), format(\u0026#34;Fahrenheit\u0026#34;, \u0026#34;\u0026lt;10\u0026#34;), \u0026#34; | \u0026#34;, format(\u0026#34;Fahrenheit\u0026#34;, \u0026#34;\u0026lt;15\u0026#34;), format(\u0026#34;Celsius\u0026#34;, \u0026#34;\u0026lt;10\u0026#34;), sep=\u0026#34;\u0026#34;) print() for i in range(10): f_conv = celsiusToFahrenheit(c_temp) c_conv = fahrenheitToCelsius(f_temp) print(format(c_temp, \u0026#34;\u0026lt;15.1f\u0026#34;), format(f_conv, \u0026#34;\u0026lt;10.1f\u0026#34;), \u0026#34; | \u0026#34;, format(f_temp, \u0026#34;\u0026lt;15.1f\u0026#34;), format(c_conv, \u0026#34;\u0026lt;10.1f\u0026#34;), sep = \u0026#34;\u0026#34;) c_temp -= 1 f_temp -= 10 # 6.13 sum_ser = 0 print(format(\u0026#34;i\u0026#34;, \u0026#34;14\u0026#34;), \u0026#34;m(i)\u0026#34;) for i in range(1, 21): sum_ser += i / (i + 1) print(format(i, \u0026#34;\u0026lt;12\u0026#34;), format(sum_ser, \u0026#34;7.4f\u0026#34;)) # 6.14 sum_ser = 0 print(format(\u0026#34;i\u0026#34;, \u0026#34;14\u0026#34;), \u0026#34;m(i)\u0026#34;) for i in range(1, 902): sum_ser += 4 * (((-1) ** (i + 1)) / (2 * i - 1)) if (i - 1) % 100 == 0: print(format(i, \u0026#34;\u0026lt;12\u0026#34;), format(sum_ser, \u0026#34;7.4f\u0026#34;)) # 6.18 n = eval(input(\u0026#34;Enter n: \u0026#34;)) for row in range(n): line_str = \u0026#34;\u0026#34; for col in range(n): line_str += str(random.randint(0, 1)) + \u0026#34; \u0026#34; print(line_str) # 6.19 - This one has really weird instructions for functions # Don\u0026#39;t name your methods like this at home kids: # Also don\u0026#39;t have three different functions for this ... def leftOfTheLine(x_0, y_0, x_1, y_1, x_2, y_2): return point_calculation(x_0, y_0, x_1, y_1, x_2, y_2) \u0026gt; 0 def onTheSameLine(x_0, y_0, x_1, y_1, x_2, y_2): return point_calculation(x_0, y_0, x_1, y_1, x_2, y_2) == 0 # Another textbook mistake here :/ def rightOfTheLine(x_0, y_0, x_1, y_1, x_2, y_2): return point_calculation(x_0, y_0, x_1, y_1, x_2, y_2) \u0026lt; 0 # Making this to make things easier def point_calculation(x_0, y_0, x_1, y_1, x_2, y_2): return (x_1 - x_0) * (y_2 - y_0) - (x_2 - x_0) * (y_1 - y_0) x_0, y_0, x_1, y_1, x_2, y_2 = eval(input(\u0026#34;Enter \u0026#34; + \u0026#34;coordinates for the three points p0, p1, and p2: \u0026#34;)) # You only need two if statements here ... result = \u0026#34;\u0026#34; if leftOfTheLine(x_0, y_0, x_1, y_1, x_2, y_2): result = \u0026#34;left side of the line\u0026#34; elif rightOfTheLine(x_0, y_0, x_1, y_1, x_2, y_2): result = \u0026#34;right side of the line\u0026#34; elif point_calculation(x_0, y_0, x_1, y_1, x_2, y_2): result = \u0026#34;same line from\u0026#34; print(\u0026#34;p2 is on the\u0026#34;, result, \u0026#34;from p0 to p1\u0026#34;) # Better solution only needing 1 function o-o: # result = \u0026#34;same line from\u0026#34; # if point_calculation(x_0, y_0, x_1, y_1, x_2, y_2) \u0026gt; 0: # result = \u0026#34;left side of the line\u0026#34; # elif point_calculation(x_0, y_0, x_1, y_1, x_2, y_2) \u0026lt; 0: # result = \u0026#34;right side of the line\u0026#34; # print(\u0026#34;p2 is on the\u0026#34;, result, \u0026#34;from p0 to p1\u0026#34;) # 6.21 def sqrt(n): lastGuess = 1.01 nextGuess = 1 while abs(nextGuess - lastGuess) \u0026gt; 0.0001: lastGuess = nextGuess nextGuess = (lastGuess + (n / lastGuess)) / 2 return nextGuess num = eval(input(\u0026#34;Enter a number: \u0026#34;)) print(\u0026#34;Sqrt:\u0026#34;, sqrt(num)) # 6.28 # Withheld due to similarity with assignment 6 "},{"id":20,"href":"/~ves314/docs/ta/cs303e/exercises/ch7/","title":"Chapter 7","section":"Exercises","content":"Chapter 7 Exercise Solutions\r#\r\rDownload Solutions\nEmbedded solutions:\n# Exercises for Chapter 7 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) import time # 7.1 class Rectangle: def __init__(self, width = 1, height = 2): self.width = width self.height = height # Don\u0026#39;t name functions like this at home kids def getArea(self): return self.width * self.height def getPerimeter(self): return 2 * (self.width + self.height) rect_1 = Rectangle(4, 40) rect_2 = Rectangle(3.5, 35.7) print(\u0026#34;Rectangle 1 --- Width: \u0026#34; + str(rect_1.width) + \u0026#34; Height: \u0026#34; + str(rect_1.height) + \u0026#34; Area: \u0026#34; + format(rect_1.getArea(), \u0026#34;.3f\u0026#34;) + \u0026#34; Permieter: \u0026#34; + format(rect_1.getPerimeter(), \u0026#34;.3f\u0026#34;)) print(\u0026#34;Rectangle 2 --- Width: \u0026#34; + str(rect_2.width) + \u0026#34; Height: \u0026#34; + str(rect_2.height) + \u0026#34; Area: \u0026#34; + format(rect_2.getArea(), \u0026#34;.3f\u0026#34;) + \u0026#34; Permieter: \u0026#34; + format(rect_2.getPerimeter(), \u0026#34;.3f\u0026#34;)) # 7.2 - Opinion -- Clashes with Python ideology: # Why make these variables private if you\u0026#39;re letting people modify them?!?!!? # The whole point of __ a variable means \u0026#34;DONT TOUCH\u0026#34; class Stock: def __init__(self, symbol, name, previousClosingPrice, currentPrice): self.__symbol = symbol self.__name = name self.__previousClosingPrice = previousClosingPrice self.__currentPrice = currentPrice def __get_name__(self): return self.__name def __get_symbol__(self): return self.__symbol def __get_prev_price__(self): return self.__previousClosingPrice def __get_curr_price__(self): return self.__currentPrice def __set_prev_price__(self, previousClosingPrice): return self.__previousClosingPrice def __set_curr_price__(self, currentPrice): return self.__currentPrice def getChangePercent(self): return ((self.__currentPrice - self.__previousClosingPrice) / self.__previousClosingPrice) * 100 stock_1 = Stock(\u0026#34;INTC\u0026#34;, \u0026#34;Intel Corporation\u0026#34;, 20.5, 20.35) print(\u0026#34;Prince change of\u0026#34;, stock_1.__get_name__() + \u0026#34;:\u0026#34;, stock_1.getChangePercent()) # 7.4 - Don\u0026#39;t. Do. This. In. Python. class Fan: SLOW = 1 MEDIUM = 2 FAST = 3 def __init__(self, speed = SLOW, radius = 5, on = False, color = \u0026#34;blue\u0026#34;): self.__speed = speed self.__radius = radius self.__on = on self.__color = color def __get_speed__(self): return self.__speed def __get_radius__(self): return self.__radius def __get_on__(self): return self.__on def __get_color__(self): return self.__color def __set_speed__(self, speed): self.__speed = speed def __set_radius__(self, radius): self.__radius = radius def __set_on__(self, on): self.__on = on def __set_speed__(self, color): self.__color = color fan_1 = Fan(Fan.FAST, 10, True, \u0026#34;yellow\u0026#34;) fan_2 = Fan(Fan.MEDIUM, 5, False, \u0026#34;blue\u0026#34;) print(\u0026#34;Fan 1 --- Speed: \u0026#34; + str(fan_1.__get_speed__()) + \u0026#34; Radius: \u0026#34; + str(fan_1.__get_radius__()) + \u0026#34; Color: \u0026#34; + str(fan_1.__get_color__()) + \u0026#34; On: \u0026#34; + str(fan_1.__get_on__())) print(\u0026#34;Fan 2 --- Speed: \u0026#34; + str(fan_2.__get_speed__()) + \u0026#34; Radius: \u0026#34; + str(fan_2.__get_radius__()) + \u0026#34; Color: \u0026#34; + str(fan_2.__get_color__()) + \u0026#34; On: \u0026#34; + str(fan_2.__get_on__())) # 7.8 class StopWatch: def __init__(self): self.__startTime = time.time() def start(self): self.__startTime = time.time() def stop(self): self.__stopTime = time.time() def getElapsedTime(self): return (self.__stopTime - self.__startTime) * 1000 watch = StopWatch() sum = 0 watch.start() for i in range(1, 1_000_000): sum += i watch.stop() print(\u0026#34;Time of execution:\u0026#34;, format(watch.getElapsedTime(), \u0026#34;.2f\u0026#34;), \u0026#34;ms\u0026#34;) "},{"id":21,"href":"/~ves314/docs/ta/cs303e/exercises/ch8/","title":"Chapter 8","section":"Exercises","content":"Chapter 8 Exercise Solutions\r#\r\rDownload Solutions\nEmbedded solutions:\n# Exercises for Chapter 8 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) # 8.1 # Look up Regular Expressions to see how string checks are normally done =) ssn = input(\u0026#34;Enter a Social Security number: \u0026#34;) ssn_valid = True ssn_valid = len(ssn) == 11 index = 0 while ssn_valid and index \u0026lt; len(ssn): if index == 3 or index == 6: ssn_valid = ssn[index] == \u0026#39;-\u0026#39; else: ssn_valid = ssn[index].isnumeric() index += 1 valid_str = \u0026#34;Valid\u0026#34; if ssn_valid else \u0026#34;Invalid\u0026#34; print(valid_str, \u0026#34;SSN\u0026#34;) # 8.3 pw = input(\u0026#34;Enter your ... password?: \u0026#34;) pw_valid = len(pw) \u0026gt;= 8 digits = 0 index = 0 while pw_valid and index \u0026lt; len(pw) and digits \u0026lt; 2: if pw[index].isnumeric(): digits += 1 elif not pw[index].isalpha(): pw_valid = False index += 1 valid_str = \u0026#34;valid\u0026#34; if ssn_valid else \u0026#34;invalid\u0026#34; print(valid_str, \u0026#34;password\u0026#34;) # 8.7 def getNumber(uppercaseLetter): if uppercaseLetter.isalpha(): if uppercaseLetter \u0026lt;= \u0026#34;O\u0026#34;: let_ascii = ord(uppercaseLetter) - 65 phone_num = let_ascii // 3 + 2 # Eh just cut your losses and check it manually elif uppercaseLetter \u0026lt;= \u0026#34;S\u0026#34;: phone_num = 7 elif uppercaseLetter \u0026lt;= \u0026#34;V\u0026#34;: phone_num = 8 else: phone_num = 9 else: phone_num = int(uppercaseLetter) return phone_num phone_str = input(\u0026#34;Enter a string: \u0026#34;) phone_num = \u0026#34;\u0026#34; for let in phone_str: if let.isalpha(): phone_num += str(getNumber(let.upper())) elif let.isnumeric(): phone_num += str(getNumber(let)) else: phone_num += let # 8.12 genome = input(\u0026#34;Enter a genome string: \u0026#34;) start_gene = False curr_gene = \u0026#34;\u0026#34; start = False for nuc in genome: # Keep a string of the current genes to consider curr_gene += nuc if len(curr_gene) \u0026gt;= 3: last_trip = curr_gene[-3:] # If we hit a start gene and aren\u0026#39;t recording then start recording if not start and last_trip == \u0026#34;ATG\u0026#34;: start = True curr_gene = \u0026#34;\u0026#34; # If we are recording and hit an end gene stop  # and print the current result elif start and (last_trip == \u0026#34;TAG\u0026#34; or last_trip == \u0026#34;TAA\u0026#34; or last_trip == \u0026#34;TGA\u0026#34;): start = False print(curr_gene[:-3]) curr_gene = \u0026#34;\u0026#34; # if we never hit a start then all of genome is in curr_gene if curr_gene == genome: print(\u0026#34;no gene is found\u0026#34;) # 8.13 def prefix(s1, s2): prefix = \u0026#34;\u0026#34; index = 0 small_len = min(len(s1), len(s2)) still_same = True while still_same and index \u0026lt; small_len and s1[index] == s2[index]: prefix += s1[index] index += 1 return prefix # Not writing a main function for the sake of the format of this page s1 = input(\u0026#34;Enter a string (1): \u0026#34;) s2 = input(\u0026#34;Enter a string (2): \u0026#34;) print(\u0026#34;Common prefix between strings:\u0026#34;, prefix(s1, s2)) # 8.15 isbn = input(\u0026#34;Enter the first 9 digits of an ISBN-10 as a string: \u0026#34;) curr_num = 0 for index in range(len(isbn)): curr_num += (index + 1) * int(isbn[index]) last_num = curr_num % 11 last_num = \u0026#34;X\u0026#34; if last_num == 10 else str(last_num) print(\u0026#34;The ISBN-10 number is\u0026#34;, isbn + last_num) "},{"id":22,"href":"/~ves314/docs/ta/cs303e/exercises/ch10/","title":"Chapter 10","section":"Exercises","content":"Chapter 10 Exercise Solutions\r#\r\rDownload Solutions\nEmbedded solutions:\n# Exercises for Chapter 10 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) import random # 10.2 # Not sure what format this question wants ... n = int(input(\u0026#34;Enter the quantity of #s you\u0026#39;d like to enter: \u0026#34;)) num_list = [] for i in range(n): num_list.append(int(input(\u0026#34;Enter a number: \u0026#34;))) num_list.reverse() print(\u0026#34;Your numbers reversed:\u0026#34;, num_list) # 10.4 user_input = input(\u0026#34;Enter scores separated by spaces: \u0026#34;) num_list = [] for num in user_input.split(): num_list.append(int(num)) avg = sum(num_list) / len(num_list) num_over = 0 for num in num_list: if num \u0026gt;= avg: num_over += 1 print(num_over, \u0026#34;scores are above or equal to the average and\u0026#34;, len(num_list) - num_over, \u0026#34;are below the average.\u0026#34;) # 10.5 user_input = input(\u0026#34;Enter ten numbers: \u0026#34;) num_list = [] out_str =\u0026#34;\u0026#34; for num in user_input.split(): if int(num) not in num_list: num_list.append(int(num)) out_str += num + \u0026#34; \u0026#34; print(\u0026#34;The distinct numbers are:\u0026#34;, out_str) # 10.7 num_list = [0] * 10 for i in range(1000): num_list[random.randint(0, 9)] += 1 print(\u0026#34;Counts: \u0026#34;) for i in range(len(num_list)): print(\u0026#34;\\tTotal\u0026#34;, str(i) + \u0026#34;s: \u0026#34;, num_list[i]) # 10.8 def indexOfSmallestElement(lst): small_index = 0 for i in range(len(lst)): if lst[i] \u0026lt; lst[small_index]: small_index = i return small_index user_input = input(\u0026#34;Enter some numbers: \u0026#34;) num_list = [] for i in user_input.split(): num_list.append(int(i)) print(\u0026#34;Smallest element is at index\u0026#34;, indexOfSmallestElement(num_list)) # 10.10 def in_place_reverse(list): for i in range(len(list) // 2): list[i], list[-i - 1] = list[-i - 1], list[i] return list user_input = input(\u0026#34;Enter some numbers: \u0026#34;) num_list = [] for i in user_input.split(): num_list.append(int(i)) print(\u0026#34;Normal list:\u0026#34;, num_list) print(\u0026#34;List reversed:\u0026#34;, in_place_reverse(num_list)) # 10.11 # Not looking for a smart way ... just any way: def shuffle(lst): for i in range(len(lst)): other = random.randint(0, len(lst) - 1) lst[i], lst[other] = lst[other], lst[i] return lst user_input = input(\u0026#34;Enter some numbers: \u0026#34;) num_list = [] for i in user_input.split(): num_list.append(int(i)) print(\u0026#34;Normal list:\u0026#34;, num_list) print(\u0026#34;List shuffled:\u0026#34;, shuffle(num_list)) # 10.13 def eliminateDuplicates(lst): in_list = [] index = 0 while index \u0026lt; len(lst): if lst[index] not in in_list: in_list.append(lst[index]) # Only go forward one if we didnt remove index += 1 else: lst.pop(index) return lst user_input = input(\u0026#34;Enter some numbers: \u0026#34;) num_list = [] for i in user_input.split(): num_list.append(int(i)) print(\u0026#34;Normal list:\u0026#34;, num_list) print(\u0026#34;List combed through:\u0026#34;, eliminateDuplicates(num_list)) # 10.15 # Withheld due to similarity with a function in Assignment 10 # 10.22 # When simualting a million of these I got up to 58 numbers of picks. # Crazy low probability but with a crazy high sample sizer you\u0026#39;ll get that! suits = [\u0026#34;Hearts\u0026#34;, \u0026#34;Diamonds\u0026#34;, \u0026#34;Clubs\u0026#34;, \u0026#34;Spades\u0026#34;] suit_picked = [0, 0, 0, 0] cards = [\u0026#34;Ace\u0026#34;, \u0026#34;Jack\u0026#34;, \u0026#34;Queen\u0026#34;, \u0026#34;King\u0026#34;] for i in range(2, 11): cards.insert(1, str(i)) while 0 in suit_picked: suit_num = random.randint(0, 3) suit_picked[suit_num] += 1 if suit_picked[suit_num] == 1: card_num = random.randint(0, 12) print(cards[card_num], \u0026#34;of\u0026#34;, suits[suit_num]) print(\u0026#34;Number of picks:\u0026#34;, sum(suit_picked)) # 10.26 # PTSD of LinkedLists right now ... def merge(list1, list2): index_1 = 0 index_2 = 0 new_list = [] while index_1 \u0026lt; len(list1) and index_2 \u0026lt; len(list2): if list1[index_1] \u0026lt; list2[index_2]: new_list.append(list1[index_1]) index_1 += 1 else: new_list.append(list2[index_2]) index_2 += 1 if index_1 \u0026lt; len(list1): new_list.extend(list1[index_1:]) else: new_list.extend(list2[index_2:]) return new_list user_input = input(\u0026#34;Enter list1: \u0026#34;) list_1 = [] for i in user_input.split(): list_1.append(int(i)) user_input = input(\u0026#34;Enter list2: \u0026#34;) list_2 = [] for i in user_input.split(): list_2.append(int(i)) print(\u0026#34;Merged list:\u0026#34;, merge(list_1, list_2)) # 10.27 def isConsecutiveFour(values): cur_match = None cur_num = 0 index = 0 while cur_num \u0026lt; 4 and index \u0026lt; len(values): if values[index] == cur_match: cur_num += 1 else: cur_match = values[index] cur_num = 1 index += 1 return cur_num == 4 user_input = input(\u0026#34;Enter some numbers: \u0026#34;) list_1 = [] for i in user_input.split(): list_1.append(int(i)) result = \u0026#34;do\u0026#34; if isConsecutiveFour(list_1) else \u0026#34;do not\u0026#34; print(\u0026#34;These numbers\u0026#34;, result, \u0026#34;contain four consecutive values\u0026#34;) "},{"id":23,"href":"/~ves314/docs/ta/cs303e/exercises/ch11/","title":"Chapter 11","section":"Exercises","content":"Chapter 11 Exercise Solutions\r#\r\rDownload Solutions\nEmbedded solutions:\n# Exercises for Chapter 11 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) import math import random # 11.1 def sumColumn(m, columnIndex): mat_sum = 0 for i in range(len(m)): mat_sum += m[i][columnIndex] return mat_sum matrix = [] for i in range(3): user_input = input(\u0026#34;Enter a 3-by-4 matrix row for row \u0026#34; + str(i) + \u0026#34;: \u0026#34;) row = [eval(x) for x in user_input.split()] matrix.append(row) for i in range(4): print(\u0026#34;Sum of the elements for column\u0026#34;, i, \u0026#34;is\u0026#34;, sumColumn(matrix, i)) # 11.2 def sumMajorDiagonal(m): mat_sum = 0 for i in range(len(m)): mat_sum += m[i][i] return mat_sum matrix = [] for i in range(4): user_input = input(\u0026#34;Enter a 4-by-4 matrix row for row \u0026#34; + str(i + 1) + \u0026#34;: \u0026#34;) row = [eval(x) for x in user_input.split()] matrix.append(row) print(\u0026#34;\\nSum of the elements in the major diagonal is\u0026#34;, sumMajorDiagonal(matrix)) # 11.5 # Textbook\u0026#39;s example output is wrong. Strange. # Also don\u0026#39;t worry about getting the format stuff ... at all # Just test to make sure your addMatrix function works or else you\u0026#39;re in # for a rough time T_T def addMatrix(a, b): res_mat = [] for i in range(len(a)): row = [] for j in range(len(b)): row.append(a[i][j] + b[i][j]) res_mat.append(row) return res_mat def make_matrix(entry_str): user_nums = input(entry_str).split() mat = [] for i in range(3): row = [] for j in range(3): row.append(eval(user_nums[i * 3 + j])) mat.append(row) return mat def display_matrix(mats, sign): print(\u0026#34;The matrices are added as follows:\u0026#34;) for row in range(3): line = \u0026#34; \u0026#34; for mat in range(3): mat_row = \u0026#34;\u0026#34; for column in range(3): mat_row += format(mats[mat][row][column], \u0026#34;.1f\u0026#34;) + \u0026#34; \u0026#34; if row == 1 and column == 2: if mat == 0: mat_row += \u0026#34; \u0026#34; + sign elif mat == 1: mat_row += \u0026#34; =\u0026#34; line += format(mat_row, \u0026#34;\u0026lt;16\u0026#34;) print(line) # mat_1 = make_matrix(\u0026#34;Enter matrix1: \u0026#34;) # mat_2 = make_matrix(\u0026#34;Enter matrix2: \u0026#34;) # mat_3 = addMatrix(mat_1, mat_2) # mats = [mat_1, mat_2, mat_3] # display_matrix(mats, \u0026#34;+\u0026#34;) # 11.6 def multiplyMatrix(a, b): res_mat = [] for i in range(len(a)): row = [] for j in range(len(b)): c_sum = 0 for k in range(3): c_sum += a[i][k] * b[k][j] row.append(c_sum) res_mat.append(row) return res_mat mat_1 = make_matrix(\u0026#34;Enter matrix1: \u0026#34;) mat_2 = make_matrix(\u0026#34;Enter matrix2: \u0026#34;) mat_3 = multiplyMatrix(mat_1, mat_2) mats = [mat_1, mat_2, mat_3] display_matrix(mats, \u0026#34;*\u0026#34;) # 11.7 def min_dist(pts): min_dist = float(\u0026#34;inf\u0026#34;) for i in range(len(pts)): for j in range(i + 1, len(pts)): dist = 0 for k in range(3): dist += (pts[j][k] - pts[i][k]) ** 2 dist = math.sqrt(dist) min_dist = min(min_dist, dist) return min_dist print(min_dist([[-1, 0, 3], [-1, -1, -1], [4, 1, 1], [2, 0.5, 9], [3.5, 2, -1], [3, 1.5, 3], [-1.5, 4, 2], [5.5, 4, -0.5]])) # 11.13 def locateLargest(a): maxs = [0, 0] for i in range(len(a)): for j in range(len(a[i])): if a[i][j] \u0026gt; a[maxs[0]][maxs[1]]: maxs = [i, j] return maxs rows = eval(input(\u0026#34;Enter the number of rows in the list: \u0026#34;)) mat = [] for i in range(rows): user_input = input(\u0026#34;Enter a row: \u0026#34;) mat.append([eval(x) for x in user_input.split()]) index = locateLargest(mat) print(\u0026#34;The location of the largest element is at (\u0026#34; + str(index[0]) + \u0026#34;, \u0026#34; + (str(index[1])) + \u0026#34;)\u0026#34;) # 11.23 # I added an extra while loop to run until an even case was found runs = 0 match = False while not match: rand_mat = [] for i in range(6): row = [] for j in range(6): row.append(random.randint(0, 1)) rand_mat.append(row) all_even = True row = 0 for row in range(6): print(rand_mat[row]) if all_even: all_even = rand_mat[row].count(1) % 2 == 0 col = 0 count = 0 for col in range(6): if rand_mat[col][row] == 1: count += 1 all_even = all_even and count % 2 == 0 row += 1 result_str = \u0026#34;All\u0026#34; if all_even else \u0026#34;Not all\u0026#34; print(result_str, \u0026#34;rows and columns have an event amount of 1s\u0026#34;) match = all_even runs += 1 print(\u0026#34;Took\u0026#34;, runs, \u0026#34;trials to finish.\u0026#34;) "},{"id":24,"href":"/~ves314/docs/ta/cs303e/exercises/ch13/","title":"Chapter 13","section":"Exercises","content":"Chapter 13 Exercise Solutions\r#\r\rDownload Solutions\nEmbedded solutions:\n# Exercises for Chapter 13 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) # 13.1 # Could use r+ instead to read and write but book doesn\u0026#39;t cover that \u0026gt;_\u0026gt; file_name = input(\u0026#34;Enter a filename: \u0026#34;) f = open(file_name, \u0026#34;r\u0026#34;) lines = f.readlines() lines = [x.replace(\u0026#34;morning\u0026#34;, \u0026#34;\u0026#34;) for x in lines] f.close() # Book didn\u0026#39;t cover writelines file UGH. Could just call # f.writelines(lines) f = open(\u0026#34;file_name\u0026#34;, \u0026#34;w\u0026#34;) for line in lines: f.write(line) f.close() # 13.2 file_name = input(\u0026#34;Enter a filename: \u0026#34;) f = open(file_name, \u0026#34;r\u0026#34;) lines = f.readlines() f.close() char_total = 0 word_total = 0 for line in lines: char_total += len(line) word_total += len(line.split()) print(char_total, \u0026#34; characters\\n\u0026#34;, word_total, \u0026#34; words\\n\u0026#34;, len(lines), \u0026#34; lines\u0026#34;, sep=\u0026#34;\u0026#34;) # 13.3 file_name = input(\u0026#34;Enter a filename: \u0026#34;) f = open(file_name, \u0026#34;r\u0026#34;) scores = f.readline().split() f.close() scores = [int(x) for x in scores] total = sum(scores) avg = sum(scores)/len(scores) print(\u0026#34;There are\u0026#34;, len(scores), \u0026#34;scores\u0026#34;) print(\u0026#34;The total is\u0026#34;, total) print(\u0026#34;The average is\u0026#34;, format(avg, \u0026#34;.2f\u0026#34;)) "},{"id":25,"href":"/~ves314/docs/ta/cs303e/exercises/ch14/","title":"Chapter 14","section":"Exercises","content":"Chapter 14 Exercise Solutions\r#\r\rDownload Solutions\nEmbedded solutions:\n# Exercises for Chapter 14 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) # 14.2 nums = input(\u0026#34;Enter some numbers separated by spaces: \u0026#34;).split() num_dict = {} for num in nums: num_dict[num] = num_dict[num] + 1 if num in num_dict else 1 max_num = -1 max_list = [] for num in num_dict.keys(): occ = num_dict[num] if occ \u0026gt; max_num: max_list = [num] max_num = occ elif occ == max_num: max_list.append(num) # You could make this prettier if you wanted print(\u0026#34;Numbers that occured the most:\u0026#34;, max_list) # 14.4 # Are we supposed to do this one? Seems weird to mess with Tkinter # 14.8 sort_list = [] word_file = open(input(\u0026#34;Enter a text file: \u0026#34;), \u0026#34;r\u0026#34;) for line in word_file.readlines(): for word in line.split(): if word not in sort_list: sort_list.append(word) sort_list.sort() print(sort_list) # 14.11 vowel_count, const_count = 0, 0 word_file = open(input(\u0026#34;Enter a text file: \u0026#34;), \u0026#34;r\u0026#34;) for line in word_file.readlines(): for word in line: for char in word: if char.isalpha(): if char.upper() in \u0026#34;AEIOU\u0026#34;: vowel_count += 1 else: const_count += 1 print(\u0026#34;Vowel Count:\u0026#34;, vowel_count, \u0026#34;\\nConsonant Count:\u0026#34;, const_count) "},{"id":26,"href":"/~ves314/docs/ta/cs303e/exercises/ch15/","title":"Chapter 15","section":"Exercises","content":"Chapter 15 Exercise Solutions\r#\r\rDownload Solutions\nEmbedded solutions:\n# Exercises for Chapter 15 of \u0026#34;Introduction to Programming using Python\u0026#34; # Solutions made by Skyler Vestal (Hook \u0026#39;Em) # 15.1 def sumDigits(n): if n == 0: return 0 return n % 10 + sumDigits(n // 10) num = int(input(\u0026#34;Please enter a number: \u0026#34;)) print(\u0026#34;The sum of the digits in\u0026#34;, num, \u0026#34;is\u0026#34;, sumDigits(num)) # 15.9 def reverseDisplay(value): if len(value) == 1: return value return value[-1] + reverseDisplay(value[:-1]) string = input(\u0026#34;Please enter a string: \u0026#34;) print(\u0026#34;The reverse of\u0026#34;, string, \u0026#34;is\u0026#34;, reverseDisplay(string)) # 15.12 def max_num(num_list): if len(num_list) == 1: return num_list[0] return max(num_list[0], max_num(num_list[1:])) input_list = input(\u0026#34;Enter a list of numbers separated by commas and spaces: \u0026#34;) print(\u0026#34;The max value is\u0026#34;, max_num(input_list)) "},{"id":27,"href":"/~ves314/docs/ta/cs314/explanations/big_o/","title":"Big O","section":"Explanations","content":"Big O / Time Complexity Practice\r#\r\rExplaining Big O\r#\r\rDetermining Big O\r#\r\r  Standard Dependent Example\r#\r\r  Logarithmic and Exponential Example\r#\r\r  Calculating Times Based on Big O\r#\r\rFast Calculation Method\r#\r\r  "},{"id":28,"href":"/~ves314/docs/ta/cs314/practice/big_o/","title":"Big O","section":"Practice","content":"Big O / Time Complexity Practice\r#\r\rDetermining Big O\r#\r\rFor the following examples, assume the correct libraries have been imported.\nLevel 1\r#\r\rMethod 1\r#\r\rprivate int[] one_one(int N) { int k = 0; int m = i; int[] nums; for (int i = 0; i \u0026lt; N; i++) { for (int j = 0; j \u0026lt; N; j++) { nums = new int[5]; } } return nums; } Method 2\r#\r\rprivate int one_two(int N) { int j = 1; int count = 0; while (j \u0026lt; 1_000_000) { for (int i = 1; i \u0026lt;= N; i++) { j += N / i + 1; } count += 1; } return count; } Method 3\r#\r\rAssume N == data.length and that arrayCopy is \\( O(N) \\) and Arrays.sort is \\( O(Nlog_2(N)) \\)\nprivate int one_three(int[] data) { int count = 0; for (int i = 0; i \u0026lt; data.length; i++) { int[] tmp = arrayCopy(data); count += tmp[i]; Arrays.sort(tmp); count += tmp[i]; } return count; } private int[] arrayCopy(int[] arr) { // Returns a copy of arr without modifying arr } Level 2\r#\r\rMethod 1\r#\r\rAssume N == data.length and Arrays.sort is \\( O(Nlog_2(N)) \\)\nprivate void two_one(int[] data) { for (int i = 1; i \u0026lt; data.length; i *= 3) { Arrays.sort(arrayCopy(data)); } } private int[] arrayCopy(int[] arr) { // Returns a copy of arr without modifying arr } Method 2\r#\r\rprivate float two_two(int N) { float weirdNum = 3; for (int i = N; i \u0026gt; 0; i--) { weird_num += 2; // This does some stuff ... who knows what  for (int j = i - 1; j \u0026lt; i; j++) { weirdNum *= j * 10.0 / N + 1; } i *= -1; weird_num -= 1; if (((int) weird_num % 2) == 0) { weirdNum *= -1; } } return weirdNum; } Method 3\r#\r\rprivate void two_three(int N) { int count = 0; for (int k = 0; k \u0026lt; N * N; k++) { for (int j = 0; j \u0026lt; Math.sqrt(N); j++) { count += 1; } } } Level 3\r#\r\rMethod 1\r#\r\rprivate void three_one(int[] data) { for (int i = 0; i \u0026lt; data.length; i++) { for (int j = 0; j \u0026lt; data.length; j++) { insertionSort(data); } } } // From: https://medium.com/@soni.dumitru/ // insertion-sort-algorithm-java-script-655483dd22c2 private void insertionSort(int[] arr) { for (int i = 1; i \u0026lt; arr.length; i++) { int temp = a[i]; int j = i - 1; while (j \u0026gt;= 0 \u0026amp;\u0026amp; arr[j] \u0026gt; temp) { arr[j + 1] = arr[j]; j -= 1; } arr[j + 1] = temp; } } Method 2\r#\r\rprivate void three_two(int N) { int r = 0; for (int i = 1; i \u0026lt; N; i *= 2) { for (int j = 0; j \u0026lt; i; j++) { for (int k = 0; k \u0026lt; N; k++) { r += 1; } } } return r; } Answers\r#\r\rDetermining Big O\r#\r\rLevel 1\r#\r\r\r\r\\(\r1) \\; O(N^2)\\\\\r2) \\; O(N)\\\\\r3) \\; O(N^2\\log_2(N))\\\\\r\\)\r\rLevel 2\r#\r\r\r\\(\r1) \\; O(N \\cdot log_2(N) \\cdot log_3(N))\\\\\r2) \\; O(1)\\\\\r3) \\; O(N^{5/2})\\\\\r\\)\r\rLevel 3\r#\r\r\r\\(\r1) \\; O(N^3)\\\\\r2) \\; O(N^2)\\\\\r\\)\r\r"},{"id":29,"href":"/~ves314/docs/ta/cs303e/","title":"CS 303E","section":"TA Classes","content":"CS 303E - Elements of Computers and Programming\r#\r\rHey y\u0026rsquo;all!\nThis page is updated for the Summer 2020 session of CS 303E.\nIf you have any questions you can reach me with whatever mode of communication works best for you here.\nMy main responsibilities for this class include being in charge of managing the grades of students with the last names [KRU, RIC] along with being the main developer of the class\u0026rsquo;s grading script:\n"}]